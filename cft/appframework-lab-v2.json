{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Palo Alto Networks AppFramework PlayGround with API Explorer",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Basic Configuration - REQUIRED"
					},
					"Parameters": [
						"AdminPassword",
                        "AuthCode1",
                        "AuthCode2",
						"ServerKeyName",
						"PanoramaSerial",	
						"AppHostedZone"	
					]
				},
				{
					"Label": {
						"default": "Advanced Configuration - General"
					},
					"Parameters": [
						"ConfigureRoute53",
						"DeployKali",
						"DeployWindowsDC",					
						"DomainNetBIOSName"
					]
				},				
				{
					"Label": {
						"default": "Advanced Configuration - Hostname Configuration"
					},
					"Parameters": [
						"FirewallHostname",
						"PublicHostname",
						"PanoramaHostname",
						"APIExplorerHostname",
						"KaliHostname"						
					]
				},					
				{
					"Label": {
						"default": "Advanced Configuration - Windows Active Directory Configuration"
					},
					"Parameters": [
						"ADTemplateFile",
						"VPCCIDR",
						"VPCID",
						"PrivateSubnet1CIDR",
						"PrivateSubnet1ID",
						"PublicSubnet1CIDR",
						"SecurityGroupWideOpen",
						"GatewayIP",				
						"DomainDNSName",
						"RestoreModePassword",
						"DomainAdminUser",
						"ADServer1InstanceType",
						"ADServer1NetBIOSName",
						"ADServer1PrivateIP",
						"QSS3BucketName",
						"QSS3KeyPrefix"
					]
				},
				{
					"Label": {
						"default": "Advanced Configuration - Files and Paths"
					},
					"Parameters": [
						"FirewallCertURL",
						"EchoMalwareURL",
						"WebGenConfURL",
						"CloudPluginName",
						"EnvironmentBucketName",
						"BootstrapBucketName",
						"BootstrapBucketRegion",
                        "AnsibleRepo",
                        "SharedFile",
                        "DevGroupFile",
                        "TemplateFile",
                        "TemplateStackFile",
                        "DevGroupName",
                        "TemplateName",
                        "TemplateStackName",
                        "keyPairPrefix"
					]
				}				
			],
			"ParameterLabels": {
				"ADServer1InstanceType": {
					"default": "Domain Controller Instance Type"
				},
				"ADServer1NetBIOSName": {
					"default": "Domain Controller NetBIOS Name"
				},
				"ADServer1PrivateIP": {
					"default": "Domain Controller Private IP Address"
				},
				"DomainAdminUser": {
					"default": "Domain Admin User Name"
				},
				"DomainDNSName": {
					"default": "Domain DNS Name"
				},
				"DomainNetBIOSName": {
					"default": "Domain NetBIOS Name"
				},
				"QSS3BucketName": {
					"default": "Quick Start S3 Bucket Name"
				},
				"QSS3KeyPrefix": {
					"default": "Quick Start S3 Key Prefix"
				},
				"RestoreModePassword": {
					"default": "Active Directory Restore Mode Password"
				},
				"BootstrapBucketName":{
					"default": "Bootstrap S3 Bucket Name"
				},
				"BootstrapBucketRegion":{
					"default": "Bootstrap S3 Bucket Region"
				},				
				"EnvironmentBucketName":{
					"default": "Environment Config S3 Bucket Name"
				},
				"ADTemplateFile":{
					"default": "AD Template File"
				},	
				"ServerKeyName": {
				  "default": "EC2 VMs Key Name"
				},
				"AdminPassword": {
					"default": "Admin Password"
				},
				"PanoramaSerial":{
					"default": "Panorama Serial"
				},
				"AppHostedZone": {
					"default": "DNS Domain Name"
				},
				"APIExplorerHostname":{
					"default": "Provisioning VM Hostname"
				},
				"FirewallHostname":{
					"default": "Firewall Hostname"
				},
				"PublicHostname":{
					"default": "Public Address Hostname"
				},
				"KaliHostname":{
					"default": "Kali VM Hostname"
				},
				"PanoramaHostname":{
					"default": "Panorama Hostname"
				},
				"Ansible Repo":{
					"default": "Ansible Pan GitHub Repo"
				},
				"CloudPluginName":{
					"default": "Cloud Plugin Name"
				},
				"FirewallCertURL":{
					"default": "Firewall Cert URL"
				},
				"ConfigureRoute53": {
					"default": "Configure Route53"
				},
				"DeployWindowsDC": {
					"default": "Deploy Windows DC"
				},
				"DeployKali": {
					"default": "Deploy Kali VM"
				},
				"EchoMalwareURL": {
					"default": "EchoMalware Binary File"
				},	
				"WebGenConfURL": {
					"default": "Web Generator Config File"
				},
                "SharedFile": {
                    "default": "Panorama Shared Configuration File Name"
                },
                "DevGroupFile": {
                    "default": "Panorama Device Group Configuration File Name"
                },
                "TemplateFile": {
                    "default": "Panorama Template Configuration File Name"
                },
                "TemplateStackFile": {
                    "default": "Panorama Template Stack Configuration File Name"
                },
                "DevGroupName": {
                    "default": "Panorama Device Group Name"
                },
                "TemplateName": {
                    "default": "Panorama Template Name"
                },
                "TemplateStackName": {
                    "default": "Panorama Template Stack Name"
                },
                "keyPairPrefix": {
                    "default": "EC2 KeyPair Prefix"
                }
			}
		}
	},
	"Parameters": {
		"BootstrapBucketName":{
			"Description": "S3 Bucket name for FW bootstrap configuration",
			"Type": "String",
            "Default": "applicationframework-ngfw"
		},
		"BootstrapBucketRegion":{
			"Description": "S3 Region where the FW bootstrap bucket is located",
			"Type": "String",
            "AllowedValues": [
				"ap-south-1",
				"eu-west-2",
				"eu-west-1",
				"ap-northeast-2",
				"ap-northeast-1",
				"sa-east-1",
				"ca-central-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"eu-central-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
            ],
			"Default" : "us-east-1"
		},
		"EnvironmentBucketName":{
			"Description": "Bucket name for non-Firewall configuration",
			"Type": "String",
            "Default": "applicationframework-conf"
		},

		"ADTemplateFile":{
			"Description": "CloudFormation Template Path for Windows Domain Controller deployment",
			"Type": "String",
			"Default" : "templates/ad-1-v3.json"
		},	
	
		"ServerKeyName": {
		  "Description": "Name of an existing EC2 KeyPair to enable SSH access to VMs. Except NGFW and Panorama",
		  "Type": "AWS::EC2::KeyPair::KeyName"
		},

		"AdminPassword": {
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"Description": "Password for API Explorer, NGFW/Panorama admin, VMs ec2-user/ubuntu users (SSH password auth enabled), Windows DC admin and users. Must be at least 8 characters containing letters, numbers and symbols",
			"MaxLength": "31",
			"MinLength": "8",
			"NoEcho": "true",
			"Type": "String"
		},

		"PanoramaSerial":{
			"Description": "Panorama Serial Number (provided by Palo Alto Networks)",
			"Type": "String"
		},

		"AuthCode1":{
			"Description": "VM-Series Capacity Licence AuthCode (SKU: PAN-VM-100-NFR)",
			"Type": "String"
		},

		"AuthCode2":{
			"Description": "VM-Series Bundle AuthCode (SKU: PAN-VM-100-BND-NFR4)",
			"Type": "String"
		},

		"AppHostedZone": {
			"Description": "DNS Domain Name or Route53 Hosted Zone Name (i.e. appframework.mycompany.com)",
			"Type": "String"
		},

		"APIExplorerHostname":{
			"Description": "Provisioning VM Hostname",
			"Type": "String",
			"Default": "builder"		
		},

		"FirewallHostname":{
			"Description": "Firewall Hostname (Management Interface)",
			"Type": "String",
			"Default": "ngfw"		
		},

		"PublicHostname":{
			"Description": "Public IP Hostname (Firewall Public Interface)",
			"Type": "String",
			"Default": "public"		
		},

		"KaliHostname":{
			"Description": "Kali Linux VM Hostname",
			"Type": "String",
			"Default": "kali"
		},

		"PanoramaHostname":{
			"Description": "Panorama Hostname",
			"Type": "String",
			"Default": "panorama"
		},

		"FirewallCertURL":{
			"Description": "Firewall SSL Certificate URL for Decryption",
			"Type": "String",
			"Default": "https://paloaltonetworks.box.com/shared/static/rkuuqhaxrmce2pl6kajsea95czpndrvm"
		},

		"CloudPluginName":{
			"Description": "Panorama Cloud Services Plugin Name and Version",
			"Type": "String",
			"Default": "cloud_services-1.2.0-h2"
		},

		"AnsibleRepo":{
			"Description": "Ansible Pan Repository URL",
			"Type": "String",
			"Default": "git+https://github.com/fvigo/ansible-pan.git"
		},

		"DomainNetBIOSName": {
			"AllowedPattern": "[a-zA-Z0-9\\-]+",
			"Default": "APPFRAMEWORK",
			"Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows (i.e. APPFRAMEWORK)",
			"MaxLength": "15",
			"MinLength": "1",
			"Type": "String"
		},

		"ConfigureRoute53": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Dynamically map hostnames to EIPs using Route53?",
			"Type": "String"
		},
		"DeployWindowsDC": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "false",
			"Description": "Deploy W2012R2 Domain Controller?",
			"Type": "String"
		},
		"DeployKali": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Deploy Kali Linux VM?",
			"Type": "String"
		},
        "ADServer1InstanceType": {
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.large",
            "Description": "Amazon EC2 instance type for the Windows Domain Controller instance",
            "Type": "String"
        },
        "ADServer1NetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "Default": "DC1",
            "Description": "NetBIOS name of the Windows Server (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainAdminUser": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Default": "paloalto",
            "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
            "MaxLength": "25",
            "MinLength": "5",
            "Type": "String"
        },
        "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
            "Default": "appframework.local",
            "Description": "Fully qualified domain name (FQDN) of the AD root domain (i.e. appframework.local)",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "microsoft/activedirectory/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RestoreModePassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "False",
			"Default": "PaL04Lt0!",
            "Type": "String"
        },
		"EchoMalwareURL": {
			"Type": "String",
			"Description": "EchoMalware Binary File Path",
			"Default": "opt/echomalware"
		},	
		"WebGenConfURL": {
			"Type": "String",
			"Description": "Web Traffic Generator Configuration File Path",
			"Default": "opt/webgenconfig.py"
		},

        "SharedFile": {
			"Type": "String",
			"Description": "Shared Conf File Name",
			"Default": "shared.xml"
        },
        "DevGroupFile": {
			"Type": "String",
			"Description": "DevGroup Conf File Name",
			"Default": "devgroup.xml"
        },
        "TemplateFile": {
			"Type": "String",
			"Description": "Template Conf File Name",
			"Default": "template.xml"
        },
        "TemplateStackFile": {
			"Type": "String",
			"Description": "Template Stack Conf File Name",
			"Default": "template-stack.xml"
        },
        "DevGroupName": {
			"Type": "String",
			"Description": "DevGroup Name",
			"Default": "DevGroup1"
        },
        "TemplateName": {
			"Type": "String",
			"Description": "Template Name",
			"Default": "Template1"
        },
        "TemplateStackName": {
			"Type": "String",
			"Description": "Template Stack Name",
			"Default": "TS1"
        },
        "keyPairPrefix": {
            "Description": "EC2 Panorama/NGFW Key Pair Prefix",
            "Type": "String",
            "Default": "appframeworklab"
        }
	},
	"Mappings": {
		"PANFWRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-e780d988" },
			"eu-west-2" :  {"AMI": "ami-876a8de0" },
			"eu-west-1" :  {"AMI": "ami-62b5fb1b" },
			"ap-northeast-2" :  {"AMI": "ami-49bd1127" },
			"ap-northeast-1" :  {"AMI": "ami-57662d31" },
			"sa-east-1" :  {"AMI": "ami-9c0154f0" },
			"ca-central-1" :  {"AMI": "ami-64038400" },
			"ap-southeast-1" :  {"AMI": "ami-27baeb5b" },
			"ap-southeast-2" :  {"AMI": "ami-00d61562" },
			"eu-central-1" :  {"AMI": "ami-55bfd73a" },
			"us-east-1" :  {"AMI": "ami-a2fa3bdf" },
			"us-east-2" :  {"AMI": "ami-11e1d774" },
			"us-west-1" :  {"AMI": "ami-a95b4fc9" },
			"us-west-2" :  {"AMI": "ami-d424b5ac" }
		},

		 "KaliRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-0830bbf8438910e39" },
			"eu-west-3" :  {"AMI": "ami-0546c2296e5c1f10a" },
			"eu-west-2" :  {"AMI": "ami-0effb6b7c7602646a" },
			"eu-west-1" :  {"AMI": "ami-0281a537e64a74d1f" },
			"ap-northeast-2" :  {"AMI": "ami-02a50c50fb2aeef9c" },
			"ap-northeast-1" :  {"AMI": "ami-05083a4c0e199bd15" },
			"sa-east-1" :  {"AMI": "ami-0ea47f147c5dd10ec" },
			"ca-central-1" :  {"AMI": "ami-0e3a605dc6111bcfe" },
			"ap-southeast-1" :  {"AMI": "ami-08aca6e68749c4ba8" },
			"ap-southeast-2" :  {"AMI": "ami-04c879e4c1bc41d98" },
			"eu-central-1" :  {"AMI": "ami-0fbb40f398aef1e61" },
			"us-east-1" :  {"AMI": "ami-07360d1b1c9e13198" },
			"us-east-2" :  {"AMI": "ami-0b2b9a650987b7d0c" },
			"us-west-1" :  {"AMI": "ami-0ca147ef9bdebe4be" },
			"us-west-2" :  {"AMI": "ami-0f95cde6ebe3f5ec3" }
		},

		"UbuntuRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-84e3b2eb" },
			"eu-west-2" :  {"AMI": "ami-941e04f0" },
			"eu-west-1" :  {"AMI": "ami-1b791862" },
			"ap-northeast-2" :  {"AMI": "ami-ab77d4c5" },
			"ap-northeast-1" :  {"AMI": "ami-48630c2e" },
			"sa-east-1" :  {"AMI": "ami-bb9bd7d7" },
			"ca-central-1" :  {"AMI": "ami-173db873" },
			"ap-southeast-1" :  {"AMI": "ami-b7f388cb" },
			"ap-southeast-2" :  {"AMI": "ami-33ab5251" },
			"eu-central-1" :  {"AMI": "ami-5055cd3f" },
			"us-east-1" :  {"AMI": "ami-66506c1c" },
			"us-east-2" :  {"AMI": "ami-965e6bf3" },
			"us-west-1" :  {"AMI": "ami-07585467" },
			"us-west-2" :  {"AMI": "ami-79873901" }
		},

		"RHELRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-e60e5a89" },
			"eu-west-2" :  {"AMI": "ami-c1d2caa5" },
			"eu-west-1" :  {"AMI": "ami-c90195b0" },
			"ap-northeast-2" :  {"AMI": "ami-26f75748" },
			"ap-northeast-1" :  {"AMI": "ami-eb50cd8d" },
			"sa-east-1" :  {"AMI": "ami-0e88cb62" },
			"ca-central-1" :  {"AMI": "ami-c1cb4ea5" },
			"ap-southeast-1" :  {"AMI": "ami-5ae89f26" },
			"ap-southeast-2" :  {"AMI": "ami-1987757b" },
			"eu-central-1" :  {"AMI": "ami-194cdc76" },
			"us-east-1" :  {"AMI": "ami-26ebbc5c" },
			"us-east-2" :  {"AMI": "ami-0b1e356e" },
			"us-west-1" :  {"AMI": "ami-77a2a317" },
			"us-west-2" :  {"AMI": "ami-223f945a" }
		},

		"PanoramaRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-8aa1f8e5" },
			"eu-west-2" :  {"AMI": "ami-b07c9bd7" },
			"eu-west-1" :  {"AMI": "ami-1e387167" },
			"ap-northeast-2" :  {"AMI": "ami-34b01c5a" },
			"ap-northeast-1" :  {"AMI": "ami-04f5be62" },
			"sa-east-1" :  {"AMI": "ami-4f3c6923" },
			"ca-central-1" :  {"AMI": "ami-8b0c8bef" },
			"ap-southeast-1" :  {"AMI": "ami-aaedbcd6" },
			"ap-southeast-2" :  {"AMI": "ami-0c07c46e" },
			"eu-central-1" :  {"AMI": "ami-76ed8519" },
			"us-east-1" :  {"AMI": "ami-000ccc7d" },
			"us-east-2" :  {"AMI": "ami-e9e2d48c" },
			"us-west-1" :  {"AMI": "ami-46667226" },
			"us-west-2" :  {"AMI": "ami-5388182b" }
		}	
	},
	"Conditions" : {
		"ConfDeployKali" : {"Fn::Equals" : [{"Ref" : "DeployKali"}, "true"]},
		"ConfRoute53" : {"Fn::Equals" : [{"Ref" : "ConfigureRoute53"}, "true"]},
		"ConfWinDC" : {"Fn::Equals" : [{"Ref" : "DeployWindowsDC"}, "true"]},	
		"KaliFQDNCondition": {"Fn::And": [{"Condition": "ConfDeployKali"}, {"Condition": "ConfRoute53" }]}
	},
  "Resources": {
	"DomainControllerTemplate": {
		"Type" : "AWS::CloudFormation::Stack",
		"Condition" : "ConfWinDC",
		"Properties" : {
			"Parameters" : {
				"ADServer1InstanceType": {"Ref":"ADServer1InstanceType"},
				"ADServer1NetBIOSName": {"Ref":"ADServer1NetBIOSName"},
				"ADServer1PrivateIP": "10.0.1.20",
				"GatewayIP": "10.0.1.11",
				"DomainAdminPassword": {"Ref":"AdminPassword"},
				"DomainAdminUser": {"Ref":"DomainAdminUser"},
				"DomainDNSName": {"Ref":"DomainDNSName"},
				"DomainNetBIOSName": {"Ref":"DomainNetBIOSName"},
				"KeyPairName": {"Ref":"ServerKeyName"},
				"PrivateSubnet1CIDR": "10.0.1.0/24",
				"PrivateSubnet1ID": {"Ref": "NewWebSubnet"},
				"PublicSubnet1CIDR": "10.0.0.0/24",
				"SecurityGroupWideOpen": {"Ref": "sgWideOpen"},
				"QSS3BucketName": {"Ref":"QSS3BucketName"},
				"QSS3KeyPrefix": {"Ref":"QSS3KeyPrefix"},
				"RestoreModePassword": {"Ref":"RestoreModePassword"},
				"VPCCIDR": "10.0.0.0/16",
				"VPCID": {"Ref": "NewVPC"},
				"FirewallCertURL":{"Ref":"FirewallCertURL"}			
			},
			"TemplateURL" : { "Fn::Join" : ["", [
				"https://s3.amazonaws.com/",   { "Fn::Join" : [ "", [ {"Ref" : "EnvironmentBucketName"}, "/", {"Ref" : "ADTemplateFile"} ] ] }
			]]},
			"TimeoutInMinutes" : 60
		}
	},
    "BootstrapRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "BootstrapRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" }]]}
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" } , "/*" ]]}
                    },
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" }]]}
                    },					
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },						
					{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" } , "/*" ]]}
                    }
					]
                }
            }]
        }
    },
    "BootstrapInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "BootstrapRole"
            }]
        }
    },

   "EnvironmentBootRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "EnvironmentBootRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [
					{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },						
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" } , "/*" ]]}
                    }
					]
                }
            }]
        }
    },
    "EnvironmentBootInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "EnvironmentBootRole"
            }]
        }
    },	

    "NewVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },

    "PublicElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "ManagementElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

     "KaliElasticIP": {
       "Type" : "AWS::EC2::EIP",
	   "Condition" : "ConfDeployKali",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

	"PanoramaElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

	"APIExplorerElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "NewPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {"Ref": "NewVPC"},
        "AvailabilityZone": "",
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn": [ "NewVPC" ]
    },

    "NewWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Fn::GetAtt" : [ "NewPublicSubnet", "AvailabilityZone" ] },
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn":[ "NewVPC", "NewPublicSubnet" ]
    },

    "igweb": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },

    "DHCPOptions1": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {"Fn::Join" : [ "", [ { "Ref" : "BootstrapBucketRegion" }, ".compute.internal" ] ] }, 
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "aclb765d6d2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb059a2460": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb049a2461": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "KaliNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
	   "Condition" : "ConfDeployKali",	  
      "Properties": {
        "Description": "Kali Network Interface",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.88",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "Kali Intf"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "PanoramaNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Panorama Network Interface",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.20",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgPanorama"}],
        "Tags": [{"Key": "Name","Value": "Panorama Intf"}]
      },
      "DependsOn": [ "sgPanorama" ]
    },
	
    "APIExplorerNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "API Explorer Network Interface",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.55",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgAPIExplorer"}],
        "Tags": [{"Key": "Name","Value": "APIExplorer Intf"}]
      },
      "DependsOn": [ "sgAPIExplorer" ]
    },

    "FWManagementNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 MGMT",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.99",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "AWS Firewall MGMT"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPublicNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/1",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.100",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "AWS Firewall E1/1"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate12NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/2",
        "SubnetId": {"Ref": "NewWebSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.1.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "AWS Firewall E1/2"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

     "FWEIPMAnagementAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "ManagementElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface" }
       },
       "DependsOn": [ "FWManagementNetworkInterface", "ManagementElasticIP", "gw1" ]
    },

    "FWEIPPublicAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "PublicElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface" }
       },
       "DependsOn": [ "FWPublicNetworkInterface", "PublicElasticIP", "gw1" ]
    },

    "KaliEIPAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
	   "Condition" : "ConfDeployKali",	   
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "KaliElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "KaliNetworkInterface" }
       },
       "DependsOn": [ "KaliNetworkInterface", "KaliElasticIP", "gw1" ]
    },

    "PanoramaAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "PanoramaElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "PanoramaNetworkInterface" }
       },
       "DependsOn": [ "PanoramaNetworkInterface", "PanoramaElasticIP", "gw1" ]
    },	
	
    "APIExplorerEIPAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "APIExplorerElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "APIExplorerNetworkInterface" }
       },
       "DependsOn": [ "APIExplorerNetworkInterface", "APIExplorerElasticIP", "gw1" ]
    },

    "sgWideOpen": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Wide open security group",
        "VpcId": {"Ref": "NewVPC"},
         "Tags": [{"Key": "Name","Value": "Lab External SG"}],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
          ]
      }
    },

	"sgAPIExplorer": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "API Explorer",
			"VpcId": {"Ref": "NewVPC"},
			"SecurityGroupIngress": [
				{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				}
			],
			"SecurityGroupEgress" : [
			  {
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			  }
			]
		}
	},

	"sgPanorama": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "Panorama",
			"VpcId": {"Ref": "NewVPC"},
			"SecurityGroupIngress": [
				{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "3978",
					"ToPort": "3978",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "28443",
					"ToPort": "28443",
					"CidrIp": "10.0.0.0/0"
				},				
				{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				}
			],
			"SecurityGroupEgress" : [
			  {
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			  }
			]			
		}		
	},

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewWebSubnet"}
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "InternetGatewayId": {"Ref": "igweb"}
      }
    },

    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "rtb049a2461"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb059a2460"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb049a2461"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "DhcpOptionsId": {"Ref": "DHCPOptions1"}
      }
    },

    "FWInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "IamInstanceProfile": {"Ref": "BootstrapInstanceProfile"},
        "InstanceInitiatedShutdownBehavior": "stop",
        "EbsOptimized": "true",
        "ImageId": { "Fn::FindInMap" : [ "PANFWRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "m4.xlarge",
        "BlockDeviceMappings" :
        [
            {
              "DeviceName" : "/dev/xvda",
              "Ebs" :
              {
                "VolumeType" : "gp2",
                "DeleteOnTermination" : "true",
                "VolumeSize" : "60"
              }
            }
        ],
        "KeyName":   { "Fn::GetAtt": ["handleKeyPair", "keyName"]},
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "AWS NGFW" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface"},
            "DeviceIndex": 0
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface"},
            "DeviceIndex": 1
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate12NetworkInterface"},
            "DeviceIndex": 2
          }
        ],
        "UserData":  { "Fn::Base64" : { "Fn::Join" : ["", [
            "vmseries-bootstrap-aws-s3bucket=",  { "Ref" : "BootstrapBucketName" }
        ]]}}
      },
      "DependsOn": [ "FWPublicNetworkInterface", "FWPrivate12NetworkInterface",  "NewPublicSubnet", "handleKeyPair" ]
    },

    "PanoramaInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "PanoramaRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.xlarge",
        "KeyName":  { "Fn::GetAtt": ["handleKeyPair", "keyName"]},
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "Panorama" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "PanoramaNetworkInterface"},
            "DeviceIndex": 0
          }
        ]
      },
      "DependsOn": [ "PanoramaNetworkInterface", "NewPublicSubnet", "handleKeyPair" ]
    },

     "KaliLinuxInstance": {
      "Type": "AWS::EC2::Instance",
	  "Condition" : "ConfDeployKali",	  
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "KaliRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "Kali Linux" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "KaliNetworkInterface"},
            "DeviceIndex": 0
          }
        ]
 	  },
     "DependsOn": [ "NewPublicSubnet", "sgWideOpen" ]
 	},

     "APIExplorerLinuxInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "IamInstanceProfile": {"Ref": "EnvironmentBootInstanceProfile"},
        "ImageId": { "Fn::FindInMap" : [ "RHELRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.medium",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "API Explorer VM" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "APIExplorerNetworkInterface"},
            "DeviceIndex": 0
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
			"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
			"sleep 10s\n",			
            "yum install -y wget git\n",
            "export DEPLOYPATH=/tmp/deploy\n",
			"ENCPWD=\"",{ "Fn::Base64" : {"Ref" : "AdminPassword" } },"\"\n",
			"export ADMINPWD=$(echo \"${ENCPWD}\" | /usr/bin/base64 -d -)\n",
			"export PANORAMASERIAL=\"",{"Ref" : "PanoramaSerial" },"\"\n",
            "export AUTHCODE1=\"",{"Ref" : "AuthCode1" },"\"\n",
            "export AUTHCODE2=\"",{"Ref" : "AuthCode2" },"\"\n",
            "if [ ! ${AUTHCODE2} ]; then export AUTHCODE2=${AUTHCODE1}; fi;\n",
            "export ANSIBLE_REPO=\"",{"Ref" : "AnsibleRepo" },"\"\n",
            "export SHARED_FILE=\"",{"Ref" : "SharedFile" },"\"\n",
            "export DEVGROUP_FILE=\"",{"Ref" : "DevGroupFile" },"\"\n",
            "export TEMPLATE_FILE=\"",{"Ref" : "TemplateFile" },"\"\n",
            "export TEMPLATE_STACK_FILE=\"",{"Ref" : "TemplateStackFile" },"\"\n",
            "export DEVGROUP_NAME=\"",{"Ref" : "DevGroupName" },"\"\n",
            "export TEMPLATE_NAME=\"",{"Ref" : "TemplateName" },"\"\n",
            "export TEMPLATE_STACK_NAME=\"",{"Ref" : "TemplateStackName" },"\"\n",
            "export S3BUCKETNAME=\"",{"Ref" : "EnvironmentBucketName" },"\"\n",
			"export CLOUDPLUGINNAME=\"",{"Ref" : "CloudPluginName" },"\"\n",
			"export FIREWALLIP=\"",{"Fn::GetAtt" : [ "FWManagementNetworkInterface", "PrimaryPrivateIpAddress" ]},"\"\n",
            "export PANORAMAIP=\"",{"Fn::GetAtt" : [ "PanoramaNetworkInterface", "PrimaryPrivateIpAddress" ]},"\"\n",
            "export KEYPAIR=\"",{ "Fn::GetAtt": ["handleKeyPair", "keyPair"]},"\"\n",
			"export AWSREGION=\"",{ "Ref" : "AWS::Region" },"\"\n",
			"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '%{rhel}').noarch.rpm\n",
			"yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n",
			"yum -y install python36u-devel\n",
			"sleep 2s\n",
            "yum -y install python36u-pip\n",
			"pip3.6 install boto3 awscli\n",
			"S3BUCKETLOCATION=$(aws s3api get-bucket-location --bucket ${S3BUCKETNAME} --output text)\n",
			"if [[ $S3BUCKETLOCATION == 'None' ]]; then S3BUCKETLOCATION='us-east-1'; fi\n",
            "export S3BUCKETLOCATION\n",
            "mkdir -p ${DEPLOYPATH}\n",
            "cat > ${DEPLOYPATH}/key.pem << _EOF_\n",
            { "Fn::GetAtt": ["handleKeyPair", "keyPair"]},
            "\n_EOF_\n",
            "chmod 400 ${DEPLOYPATH}/key.pen\n",
			"aws --region ${S3BUCKETLOCATION} s3 cp --recursive s3://${S3BUCKETNAME}/deploy ${DEPLOYPATH}\n",
            "echo ngfw_ip: \"${FIREWALLIP}\" >> ${DEPLOYPATH}/vars.yml\n",
            "echo pano_ip: \"${PANORAMAIP}\" >> ${DEPLOYPATH}/vars.yml\n",
            "echo admin_username: \"admin\" >> ${DEPLOYPATH}/vars.yml\n",
            "echo admin_password: \"${ADMINPWD}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo pano_serial: \"${PANORAMASERIAL}\" >> ${DEPLOYPATH}/vars.yml\n",          
            "echo key_filename: \"${DEPLOYPATH}/key.pem\" >> ${DEPLOYPATH}/vars.yml\n",
            "echo authcode1: \"${AUTHCODE1}\" >> ${DEPLOYPATH}/vars.yml\n",  
            "echo authcode2: \"${AUTHCODE2}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo cloud_plugin: \"${CLOUDPLUGINNAME}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo shared_file: \"${DEPLOYPATH}/${SHARED_FILE}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo devgroup_file: \"${DEPLOYPATH}/${DEVGROUP_FILE}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo template_file: \"${DEPLOYPATH}/${TEMPLATE_FILE}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo template_stack_file: \"${DEPLOYPATH}/${TEMPLATE_STACK_FILE}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo devgroup_name: \"${DEVGROUP_NAME}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo template_name: \"${TEMPLATE_NAME}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "echo template_stack_name: \"${TEMPLATE_STACK_NAME}\" >> ${DEPLOYPATH}/vars.yml\n",      
            "pip3.6 install paramiko boto3 ansible\n",
            "ln -s /bin/pip3.6 /bin/pip3\n",
            "ansible-galaxy install ${ANSIBLE_REPO}\n",
            "cd ${DEPLOYPATH}\n",
            "ansible-playbook ${DEPLOYPATH}/panorama_setup.yml\n",
            "ansible-playbook ${DEPLOYPATH}/firewall_setup.yml\n",
            "ansible-playbook ${DEPLOYPATH}/appframework_lab.yml\n",
			"rm ${DEPLOYPATH}/key.pem\n"
          ]]}
        }		
	  },
      "DependsOn": [ "NewPublicSubnet", "sgAPIExplorer", "APIExplorerElasticIP", "handleKeyPair"]
    },
	
    "WebVM": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "IamInstanceProfile": {"Ref": "EnvironmentBootInstanceProfile"},		
        "ImageId": { "Fn::FindInMap" : [ "UbuntuRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{"Key": "Name","Value": "Linux Web Server"}],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "NewWebSubnet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.101",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWideOpen"
              }
            ]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
			"sleep 10s\n",
			"ENCPWD=\"",{ "Fn::Base64" : {"Ref" : "AdminPassword" } },"\"\n",
			"export ADMINPWD=$(echo \"${ENCPWD}\" | /usr/bin/base64 -d -)\n",
			"export URLENCODEDPWD=$(/usr/bin/python3 -c 'import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))' \"${ADMINPWD}\")\n",
			"export FIREWALLIP=\"",{"Fn::GetAtt" : [ "FWManagementNetworkInterface", "PrimaryPrivateIpAddress" ]},"\"\n",
			"export FIREWALLCERTURL=\"",{"Ref" : "FirewallCertURL" },"\"\n",
			"export NETBIOSDOMAIN=\"",{"Ref" : "DomainNetBIOSName" },"\"\n",
			"export S3BUCKETNAME=\"",{"Ref" : "EnvironmentBucketName" },"\"\n",
			"export ECHOMALWARE=\"",{"Ref" : "EchoMalwareURL" },"\"\n",
			"export WEBGENCONF=\"",{"Ref" : "WebGenConfURL" },"\"\n",
			"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "echo \"export new_routers='",{"Fn::GetAtt" : [ "FWPrivate12NetworkInterface", "PrimaryPrivateIpAddress" ]},"'\" >> /etc/dhcp/dhclient-enter-hooks.d/aws-default-route\n",
            "ifdown eth0\n",
            "ifup eth0\n",
			"while true\n",
			"  do\n",
			"    resp=$(curl -s -S -g --insecure -X POST -m 10 --connect-timeout 10 -k \"https://${FIREWALLIP}/api/?password=${URLENCODEDPWD}&type=keygen&user=admin\")\n",
			"    if [[ \"$resp\" =~ \"success\" ]]; then\n",
			"      APIKEY=$(echo $resp | sed \"s/^.*<key>\\(.*\\)<\\/key>.*$/\\1/\")\n",
			"      break\n",
			"    fi\n",
			"  sleep 10s\n",
            "done\n",			
            "while true\n",
            "  do\n",
            "   resp=$(curl -s -S -g --insecure \"https://${FIREWALLIP}/api/?type=op&cmd=<show><chassis-ready></chassis-ready></show>&key=${APIKEY}\")\n",
            "   if [[ $resp == *\"[CDATA[yes\"* ]] ; then\n",
            "     break\n",
            "   fi\n",
            "  sleep 10s\n",
            "done\n",
			"sleep 120s\n",
			"wget --no-check-certificate -O /tmp/panca.pem ${FIREWALLCERTURL}\n",
			"openssl x509 -in /tmp/panca.pem -inform PEM -out /usr/local/share/ca-certificates/panca.crt\n",
			"/usr/sbin/update-ca-certificates\n",
			"apt-get update\n",
			"apt install -y wget python python-pip\n",
			"pip install --cert=/usr/local/share/ca-certificates/panca.crt --upgrade pip==9.0.3\n",
			"pip install --cert=/usr/local/share/ca-certificates/panca.crt pan-python\n",
			"pip install --cert=/usr/local/share/ca-certificates/panca.crt boto3 requests awscli\n",
			"S3BUCKETLOCATION=$(aws --ca-bundle /usr/local/share/ca-certificates/panca.crt s3api get-bucket-location --bucket ${S3BUCKETNAME} --output text)\n",
			"if [[ $S3BUCKETLOCATION == 'None' ]]; then S3BUCKETLOCATION='us-east-1'; fi\n",
			"export S3BUCKETLOCATION\n",
			"aws --region ${S3BUCKETLOCATION} --ca-bundle /usr/local/share/ca-certificates/panca.crt s3 cp s3://${S3BUCKETNAME}/${ECHOMALWARE} /home/ubuntu/echomalware\n",
			"chmod 755 /home/ubuntu/echomalware\n",
			"chown ubuntu:ubuntu /home/ubuntu/echomalware\n",
			"cat <<_EOF_ > /tmp/uid.xml\n",
			"<uid-message>\n",
			"  <type>update</type>\n",
			"  <payload>\n",
            "    <login>\n",
            "      <entry name=\"${NETBIOSDOMAIN}\\user1\" ip=\"10.0.1.101\"/>\n",
            "    </login>\n",
            "  </payload>\n",
            "</uid-message>\n",
			"_EOF_\n",
            "panxapi.py -h ${FIREWALLIP} -l \"admin:${ADMINPWD}\" -k -t '' > /tmp/.panrc\n",
			"cd /tmp && panxapi.py -U /tmp/uid.xml\n",
			"echo ubuntu:${ADMINPWD} | /usr/sbin/chpasswd\n",
			"sed -i \"s/PasswordAuthentication no/PasswordAuthentication yes/g\" /etc/ssh/sshd_config\n",
			"systemctl restart sshd\n",
            "apt-get install -y apache2\n",
			"systemctl restart apache2\n",
			"echo '*/15 * * * * cd /tmp && /usr/local/bin/panxapi.py -U uid.xml' > /tmp/crontab_uid.txt\n",
            "sudo -u ubuntu bash -c 'crontab /tmp/crontab_uid.txt'\n",
			"sudo -u ubuntu bash -c 'cd /home/ubuntu; git clone https://github.com/ecapuano/web-traffic-generator.git'\n",
			"aws --region ${S3BUCKETLOCATION} --ca-bundle /usr/local/share/ca-certificates/panca.crt s3 cp s3://${S3BUCKETNAME}/${WEBGENCONF} /home/ubuntu/web-traffic-generator/config.py\n",
			"chmod 644 /home/ubuntu/web-traffic-generator/config.py\n",
			"chown ubuntu:ubuntu /home/ubuntu/web-traffic-generator/config.py\n",
			"sudo -u ubuntu bash -c 'REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt nohup python /home/ubuntu/web-traffic-generator/gen.py 1>>/tmp/webgen.stdout 2>>/tmp/webgen.stderr' &\n"
          ]]}
        }
      },
      "DependsOn": [ "NewWebSubnet", "sgWideOpen", "PublicElasticIP" ]
    },

   "APIExplorerFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "ConfRoute53",
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for API Explorer",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "APIExplorerHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "APIExplorerElasticIP" }
         ]
      },
	  "DependsOn": [ "APIExplorerElasticIP" ]
   },	

   "PublicFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "ConfRoute53",
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for FW Public IP",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "PublicHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "PublicElasticIP" }
         ]
      },
	  "DependsOn": [ "PublicElasticIP" ]
   },
   
   "FirewallFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "ConfRoute53",	  
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for Firewall",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "FirewallHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "ManagementElasticIP" }
         ]
      },
	  "DependsOn": [ "ManagementElasticIP" ]
   },	   

     "PanoramaFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "ConfRoute53",	  
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for Panorama",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "PanoramaHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "PanoramaElasticIP" }
         ]
      },
	  "DependsOn": [ "PanoramaElasticIP" ]	  
   },
 
   "KaliFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "KaliFQDNCondition",	  
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for Kali Linux",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "KaliHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "KaliElasticIP" }
         ]
      },
	  "DependsOn": [ "KaliElasticIP" ]	  
   },

   "LambdaEC2Role": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version" : "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [ "lambda.amazonaws.com" ]
                    },
                    "Action": [ "sts:AssumeRole" ]
                }]
            },
            "ManagedPolicyArns": [
                { "Ref": "EC2KeyPairPolicy" },
                { "Ref": "LambdaExecutionPolicy"}
            ]
        }
    },

    "EC2HandleKeysFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Code": {
                "S3Bucket": "appframeworklab-lambdas",
                "S3Key": "lambdas.zip"
            },
            "Description": "Handle EC2 KeyPair",
            "Handler": "index.handleKeyPair",
            "Role": {"Fn::GetAtt" : [ "LambdaEC2Role", "Arn" ] },
            "Runtime": "nodejs8.10",
            "Timeout": 30
        },
        "DependsOn": [
            "LambdaEC2Role"
        ]
    },

    "handleKeyPair": {
        "Type": "Custom::handleKeyPair",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["EC2HandleKeysFunction", "Arn"] },
            "keyName": {"Ref": "keyPairPrefix"},
            "stackName": { "Ref": "AWS::StackName" }
        },
        "DependsOn": [
            "EC2HandleKeysFunction"
        ]
    },

    "EC2KeyPairPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Properties": {
            "Description" : "EC2 KeyPair Creation Policy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "ec2:CreateKeyPair",
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": "ec2:DeleteKeyPair",
                        "Resource": "*"
                    }
                ]
            }
        }
    },
    "LambdaExecutionPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Properties": {
            "Description" : "Lambda Execution Policy",
            "PolicyDocument" : {
                "Version" : "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                    }
                ]
            }
        }
    }
  },

  "Outputs": {
    "FirewallManagementURL": {
      "Description": "VM-Series management interface URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Fn::Join" : [ "", [ {"Ref" : "FirewallHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
      ]]}
    },

	"KaliLinuxFQDN": {
      "Description": "Kali Linux FQDN",
	  "Condition" : "ConfDeployKali",
      "Value": { "Fn::Join" : [ "", [ {"Ref" : "KaliHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
    },	  

	"ProvisionFQDN": {
        "Description": "Provisioning VM FQDN",
        "Value": { "Fn::Join" : [ "", [ {"Ref" : "APIExplorerHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
    },

    "PanoramaURL": {
      "Description": "Panorama URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Fn::Join" : [ "", [ {"Ref" : "PanoramaHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
      ]]}
    },
	
    "PublicIPAddressFQDN": {
      "Description": "Public IP FQDN",
      "Value": { "Fn::Join" : [ "", [ {"Ref" : "PublicHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
    }
  }
}
