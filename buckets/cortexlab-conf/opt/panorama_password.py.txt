from __future__ import print_function
import json
import boto3
import os
import paramiko
from pandevice import panorama
from pandevice import firewall
from pandevice import device
import pan.xapi
import ssl
import logging
import time
logging.basicConfig(filename="/tmp/panorama_setup.log", level=logging.DEBUG)
logging.getLogger("paramiko").setLevel(logging.DEBUG)
#logging.getLogger("boto3").setLevel(logging.DEBUG)
#logging.getLogger("pandevice").setLevel(logging.DEBUG)
#logging.getLogger().setLevel(pan.xapi.DEBUG3)
#paramiko.util.log_to_file("/tmp/paramiko.log")
#boto3.set_stream_logger(name='botocore')

def configure_template(fw, pn, templatefile):
    fwall = firewall.Firewall(fw['hostname'], fw['username'], fw['password'])

    fwInfo = fwall.refresh_system_info()
    fwSerial = fwInfo.serial
    prodlog.info('Firewall.serial = {}\n'.format(fwSerial))

    prodlog.info('Connecting to Panorama')

    try:
        xapi = pan.xapi.PanXapi(hostname=pn['hostname'], api_username=pn['username'], api_password=pn['password'])
    except pan.xapi.PanXapiError as msg:
        prodlog.error('pan.xapi.PanXapi: {}'.format(msg))
        return

    prodlog.info('Connected, reading template file')
    
    try:
        f = open(templatefile,'r')
        d = f.read()
        f.close()
    except Exception as msg:
        prodlog.error('file: {}'.format(msg))
        return
    prodlog.info('Template file read, adding template')

    xpath = "/config/devices/entry[@name='localhost.localdomain']/template"
    element = d

    try:
        xapi.edit(xpath=xpath,
                  element=element)
    except pan.xapi.PanXapiError as msg:
        prodlog.error('edit: {}'.format(msg))
        return


    prodlog.info('Template created, adding Firewall to Template Stack')
    xpath = "/config/devices/entry[@name='localhost.localdomain']/template-stack"
    element = '<template-stack><entry name="TS1"><settings/><templates><member>Template1</member></templates><description>Template Stack 1</description><devices><entry name=\"{}\"/></devices></entry></template-stack>'.format(fwSerial)
    
    try:
        xapi.edit(xpath=xpath,
                  element=element)
    except pan.xapi.PanXapiError as msg:
        prodlog.error('edit: {}'.format(msg))
        return

    prodlog.info('Device added to Template Stack!'.format(fwSerial))
    

def license_panorama(pn):
    pano = panorama.Panorama(pn['hostname'], pn['username'], pn['password'])

    lic = pano.fetch_licenses_from_license_server()

def pano_commit_all(pn, devicegroup):
    pano = panorama.Panorama(pn['hostname'], pn['username'], pn['password'])
    prodlog.info("Committing on Panorama")
    pano.commit(sync=True)
    prodlog.info("Committed on Panorama")
    prodlog.info("Committing All on Panorama")
    pano.commit_all(sync=True, sync_all=True, devicegroup=devicegroup)
    prodlog.info("Committed All on Panorama")
    
    
def reg_firewall_on_panorama(fw, pn, devGroupName):
    fwall = firewall.Firewall(fw['hostname'], fw['username'], fw['password'])

    fwInfo = fwall.refresh_system_info()
    fwSerial = fwInfo.serial
    prodlog.info('Firewall.serial = {}\n'.format(fwSerial))

    syss = device.SystemSettings()
    fwall.add(syss)
    syss.refresh()

    syss.panorama = pn['hostname']
    syss.apply()
    time.sleep(60)
    fwall.commit()

    # Create a firewall with the serial number
    newfw = firewall.Firewall(serial=fwSerial)
    # Create the new device group and add the device
    pano = panorama.Panorama(pn['hostname'], pn['username'], pn['password'])
    pano.add(newfw)
    newfw.create()
    devg = panorama.DeviceGroup(devGroupName)
    pano.add(devg)
    devg.create()
    devg.add(newfw)
    newfw.create()

    pano.commit(sync=True)

def ngfw_set_password(params):
        if 'num_retries' in params:
            num_retries = params['num_retries']
        else:
            num_retries = 35

        if 'retry_interval' in params:
            retry_interval = params['retry_interval']
        else:
            retry_interval = 60

        if 'command_timeout' in params:
            command_timeout = params['command_timeout']
        else:
            command_timeout = 15

        if 'commit_timeout' in params:
            commit_timeout = params['commit_timeout']
        else:
            commit_timeout = 20

        s3bucketlocation = params['s3bucketlocation']
        s3 = boto3.client('s3', region_name= s3bucketlocation)

        s3bucketname = params['s3bucketname']
        s3keyfilename = params['s3keyfilename']
        s3.download_file(s3bucketname,s3keyfilename, '/tmp/panwkey.pem')
        k = paramiko.RSAKey.from_private_key_file('/tmp/panwkey.pem')

        c = paramiko.SSHClient()

        c.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        host = params['firewallIP']
        adminPassword = params['adminPassword']
        
        retries = 0
        while True:
            retries = retries + 1
            try:
                c.connect( hostname = host, username = 'admin', pkey = k, timeout=command_timeout)
                # Connection succeeded
                break
            except Exception as e:
                prodlog.error('Unable to establish SSH connection: {}'.format(e))
                if retries >= num_retries:
                    return { 'message' : 'Firewall password change error: SSH error after too many retries' }
                else:
                    time.sleep(retry_interval)

        prodlog.info("Connected to {}".format(host))

        os.remove('/tmp/panwkey.pem')

        time.sleep(command_timeout)

        sh = c.invoke_shell()
        prodlog.info("Invoked Shell!")
        time.sleep(command_timeout)
        output = sh.recv(5000)
        #prodlog.info("SSH Banner:\n{}".format(output))

        commands = [
                'configure',
                'set mgt-config users admin password',
                adminPassword,
                adminPassword,
        ]
        time.sleep(5)
        for cmd in commands:
            prodlog.info("Executing: {}".format(cmd))
            sh.send("{}\n".format(cmd))
            time.sleep(command_timeout)
            output = sh.recv(5000)
            prodlog.debug("CMD Output\n{}".format(output))

        # commit
        prodlog.info("Committing configuration")
        sh.send("commit\n")
        time.sleep(commit_timeout)
        output = sh.recv(5000)

        if b'Configuration committed successfully' in output:
            prodlog.info("Configuration Commit OK!")
        else:
            prodlog.error('Configuration Commit Error: {}'.format(output))
            c.close()
            return {
                'message' : 'Firewall password change error!'
            }
        c.close()

def panorama_set_password_and_import_plugin(params):
        if 'num_retries' in params:
            num_retries = params['num_retries']
        else:
            num_retries = 35

        if 'retry_interval' in params:
            retry_interval = params['retry_interval']
        else:
            retry_interval = 60

        if 'command_timeout' in params:
            command_timeout = params['command_timeout']
        else:
            command_timeout = 10

        if 'commit_timeout' in params:
            commit_timeout = params['commit_timeout']
        else:
            commit_timeout = 20


        s3bucketlocation = params['s3bucketlocation']
        s3 = boto3.client('s3', region_name= s3bucketlocation)


        s3bucketname = params['s3bucketname']
        s3keyfilename = params['s3keyfilename']
        s3.download_file(s3bucketname,s3keyfilename, '/tmp/panwkey.pem')
        k = paramiko.RSAKey.from_private_key_file('/tmp/panwkey.pem')

        c = paramiko.SSHClient()

        c.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        host = params['panoramaIP']
        adminPassword = params['adminPassword']
        panoramaSerialNumber = params['panoramaSerialNumber']

        cloudPluginName = params['cloudPluginName']
        provisioningVM = params['provisioningVM']
        
        retries = 0
        while True:
            retries = retries + 1
            try:
                c.connect( hostname = host, username = 'admin', pkey = k, timeout=command_timeout)
                # Connection succeeded
                break
            except Exception as e:
                prodlog.error('Unable to establish SSH connection: {}'.format(e))
                if retries >= num_retries:
                    return { 'message' : 'Panorama password change error: SSH error after too many retries' }
                else:
                    time.sleep(retry_interval)

        prodlog.info("Connected to {}".format(host))

        os.remove('/tmp/panwkey.pem')

        time.sleep(command_timeout)

        sh = c.invoke_shell()
        prodlog.info("Invoked Shell!")
        time.sleep(command_timeout)
        output = sh.recv(5000)
        #prodlog.info("SSH Banner:\n{}".format(output))

        commands = [
                'set serial-number {}'.format(panoramaSerialNumber),
                'configure',
                'set mgt-config users admin password',
                adminPassword,
                adminPassword,
                'set deviceconfig system dns-setting servers primary 8.8.8.8',
                'set deviceconfig system ntp-servers primary-ntp-server ntp-server-address 169.254.169.123'
        ]
        time.sleep(5)
        for cmd in commands:
            prodlog.info("Executing: {}".format(cmd))
            sh.send("{}\n".format(cmd))
            time.sleep(command_timeout)
            output = sh.recv(5000)
            prodlog.debug("CMD Output\n{}".format(output))

        # commit
        prodlog.info("Committing configuration")
        sh.send("commit\n")
        time.sleep(commit_timeout)
        output = sh.recv(5000)

        if b'Configuration committed successfully' in output:
            prodlog.info("Configuration Commit OK!")
        else:
            prodlog.error('Configuration Commit Error: {}'.format(output))
            c.close()
            return {
                'message' : 'Panorama password change error!'
            }
            
        commands2 = [
                'exit',
                'scp import plugin from ec2-user@{}:/tmp/{}'.format(provisioningVM, cloudPluginName),
                'yes',
                adminPassword,
                'request plugins install {}'.format(cloudPluginName)
        ]
        
        time.sleep(5)
        for cmd in commands2:
            prodlog.info("Executing: {}".format(cmd))
            sh.send("{}\n".format(cmd))
            time.sleep(command_timeout)
            output = sh.recv(10000)
            prodlog.debug("CMD Output\n{}".format(output))

        # wait for another commit timeout
        time.sleep(commit_timeout)
                   
        c.close()
                
if __name__ == "__main__":

    prodlog = logging.getLogger('panorama_setup')

    params = {}

    params['panoramaIP'] = os.environ.get('PANORAMAIP')
    if params['panoramaIP'] is None:
        prodlog.error('Cannot read variable {}\n'.format('PANORAMAIP'))
        print('Cannot read variable {}\n'.format('PANORAMAIP'))
        exit()

    params['s3bucketname'] = os.environ.get('S3BUCKETNAME')
    if params['s3bucketname'] is None:
        prodlog.error('Cannot read variable {}\n'.format('S3BUCKETNAME'))
        print('Cannot read variable {}\n'.format('S3BUCKETNAME'))
        exit()

    params['firewallIP'] = os.environ.get('FIREWALLIP')
    if params['firewallIP'] is None:
        prodlog.error('Cannot read variable {}\n'.format('FIREWALLIP'))
        print('Cannot read variable {}\n'.format('FIREWALLIP'))
        exit()

    params['s3keyfilename'] = os.environ.get('S3KEYFILENAME')
    if params['s3keyfilename'] is None:
        prodlog.error('Cannot read variable {}\n'.format('S3KEYFILENAME'))
        print('Cannot read variable {}\n'.format('S3KEYFILENAME'))
        exit()

    params['s3bucketlocation'] = os.environ.get('S3BUCKETLOCATION')
    if params['s3bucketlocation'] is None:
        prodlog.error('Cannot read variable {}\n'.format('S3BUCKETLOCATION'))
        print('Cannot read variable {}\n'.format('S3BUCKETLOCATION'))
        exit()

    params['panoramaSerialNumber'] = os.environ.get('PANORAMASERIAL')
    if params['panoramaSerialNumber'] is None:
        prodlog.error('Cannot read variable {}\n'.format('S3KEYFILENAME'))
        print('Cannot read variable {}\n'.format('PANORAMASERIAL'))
        exit()

    params['adminPassword'] = os.environ.get('ADMINPWD')
    if params['adminPassword'] is None:
        prodlog.error('Cannot read variable {}\n'.format('ADMINPWD'))
        print('Cannot read variable {}\n'.format('ADMINPWD'))
        exit()

    params['cloudPluginName'] = os.environ.get('CLOUDPLUGINNAME')
    if params['cloudPluginName'] is None:
        prodlog.error('Cannot read variable {}\n'.format('CLOUDPLUGINNAME'))
        print('Cannot read variable {}\n'.format('CLOUDPLUGINNAME'))
        exit()

    params['provisioningVM'] = os.environ.get('PROVISIONINGVM')
    if params['provisioningVM'] is None:
        prodlog.error('Cannot read variable {}\n'.format('PROVISIONINGVM'))
        print('Cannot read variable {}\n'.format('PROVISIONINGVM'))
        exit()

    params['templatefilename'] = os.environ.get('TEMPLATEFILENAME')
    if params['templatefilename'] is None:
        prodlog.error('Cannot read variable {}\n'.format('TEMPLATEFILENAME'))
        print('Cannot read variable {}\n'.format('TEMPLATEFILENAME'))
        exit()

    try:
        _create_unverified_https_context = ssl._create_unverified_context
    except AttributeError:
        # Legacy Python that doesn't verify HTTPS certificates by default
        pass
    else:
        # Handle target environment that doesn't support HTTPS verification
        ssl._create_default_https_context = _create_unverified_https_context
    ###Python2    ssl._https_verify_certificates(False)

    prodlog.info('Setting Password and importing Cloud Plugin on Panorama...')
    panorama_set_password_and_import_plugin(params)
    prodlog.info('Password set on Panorama and Plugin imported')

    pn = {
        'hostname' : params['panoramaIP'],
        'username' : 'admin',
        'password' : params['adminPassword']
    }
    fw = {
        'hostname' : params['firewallIP'],
        'username' : 'admin',
        'password' : params['adminPassword']
    }

    prodlog.info('Sleeping for 120 seconds before licensing panorama...')
    time.sleep(120)
    prodlog.info('Licensing Panorama')
    license_panorama(pn)
    prodlog.info('Panorama Licensed')

    prodlog.info('Sleeping for 300 seconds before setting NGFW password...')
    time.sleep(300)
    prodlog.info('Setting NGFW password...')
    ngfw_set_password(params)
    prodlog.info('Password set on NGFW')

    prodlog.info('Sleeping for 120 seconds before registering NGFW to Panorama...')
    time.sleep(120)

    prodlog.info('Registering Firewall on Panorama')
    reg_firewall_on_panorama(fw,pn, devGroupName = 'DevGroup1')
    prodlog.info('Registered Firewall on Panorama')

    configure_template(fw, pn, params['templatefilename'])
    prodlog.info('Sleeping for 180 seconds before commit all...')
    time.sleep(180)
    pano_commit_all(pn, 'DevGroup1')
