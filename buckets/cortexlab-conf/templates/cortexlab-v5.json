{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Palo Alto Networks Cortex Lab",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Basic Configuration - REQUIRED"
					},
					"Parameters": [
						"AdminPassword",
            "AuthCode1",
            "AuthCode2",
						"ServerKeyName",
						"PSK",	
            "AppHostedZone",
            "DataLakeRegion",
            "VPNUserName"
					]
				},
				{
					"Label": {
						"default": "Advanced Configuration: Options"
					},
					"Parameters": [
            "DeployWebVM",
						"DeployKali",
						"DeployWindowsDC",					
            "DevicesTimeZone",
            "DomainNetBIOSName"
					]
				},				
				{
					"Label": {
						"default": "Hostnames Configuration"
					},
					"Parameters": [
						"FirewallHostname",
						"PublicHostname",
						"BuilderHostname",
						"KaliHostname"						
					]
                },	
				{
					"Label": {
						"default": "Advanced DNS Configuration (Change only if instructed)"
					},
					"Parameters": [
                      "CreateDNSRecords",
                      "CreateHostedZone",
                      "UseCortexDomain",
                      "Company",
                      "apiKey",
                      "CreateDNSRecord"
                    ]
                },
				{
					"Label": {
						"default": "Advanced Configuration: Windows Active Directory"
					},
					"Parameters": [
						"ADTemplateFile",
						"VPCCIDR",
						"VPCID",
						"PrivateSubnet1CIDR",
						"PrivateSubnet1ID",
						"PublicSubnet1CIDR",
						"SecurityGroupWideOpen",
						"GatewayIP",				
						"DomainDNSName",
						"RestoreModePassword",
						"DomainAdminUser",
						"ADServer1InstanceType",
						"ADServer1NetBIOSName",
						"ADServer1PrivateIP",
						"QSS3BucketName",
						"QSS3KeyPrefix"
					]
				},
				{
					"Label": {
						"default": "Advanced Configuration: Files, URLs, Versions and Paths"
					},
					"Parameters": [
                        "FirewallCertURL",
						            "WebVMTemplateFile",
                        "WebGenConfURL",
                        "WebServerBuilderScriptURL",
                        "WebServerBuilderScriptName",
                        "PanOSVersion",
                        "EnvironmentBucketName",
                        "EnvironmentBucketRegion",
                        "BootstrapBucketName",
                        "BootstrapBucketRegion",
                        "AnsibleRepo",
                        "NGFWConfigFile",
                        "keyPairPrefix",
                        "BuildScript"
					]
				}				
			],
			"ParameterLabels": {
                "DevicesTimeZone": {
                    "default": "FirewallTimezone"
                },
				"ADServer1InstanceType": {
					"default": "Domain Controller Instance Type"
				},
				"ADServer1NetBIOSName": {
					"default": "Domain Controller NetBIOS Name"
				},
				"ADServer1PrivateIP": {
					"default": "Domain Controller Private IP Address"
				},
				"DomainAdminUser": {
					"default": "Domain Admin User Name"
				},
				"DomainDNSName": {
					"default": "Domain DNS Name"
				},
				"DomainNetBIOSName": {
					"default": "Domain NetBIOS Name"
				},
				"QSS3BucketName": {
					"default": "Quick Start S3 Bucket Name"
				},
				"QSS3KeyPrefix": {
					"default": "Quick Start S3 Key Prefix"
				},
				"RestoreModePassword": {
					"default": "Active Directory Restore Mode Password"
				},
				"BootstrapBucketName":{
					"default": "Bootstrap S3 Bucket Name"
				},
				"BootstrapBucketRegion":{
					"default": "Bootstrap S3 Bucket Region"
				},				
				"EnvironmentBucketName":{
					"default": "Environment Config S3 Bucket Name"
                },
				"EnvironmentBucketRegion":{
					"default": "Environment S3 Bucket Region"
				},	
				"ADTemplateFile":{
					"default": "AD Template File"
                },	
				"WebVMTemplateFile":{
					"default": "Web VM Template File"
				},
				"ServerKeyName": {
				  "default": "EC2 VMs Key Name"
				},
				"AdminPassword": {
					"default": "Admin Password"
				},
				"PSK":{
					"default": "Cortex Data Lake Pre Shared Key"
				},
				"AppHostedZone": {
					"default": "DNS Domain Name"
        },
				"DataLakeRegion": {
					"default": "Cortex Data Lake Region"
				},
				"VPNUserName": {
					"default": "VPN User Name"
				},
				"BuilderHostname":{
					"default": "Provisioning VM Hostname"
				},
				"FirewallHostname":{
					"default": "Firewall Hostname"
				},
				"PublicHostname":{
					"default": "Public Address Hostname"
				},
				"KaliHostname":{
					"default": "Kali VM Hostname"
				},
				"Ansible Repo":{
					"default": "Ansible Pan GitHub Repo"
				},
				"PanOSVersion":{
					"default": "PanOS Version"
				},                
				"FirewallCertURL":{
					"default": "Firewall Cert URL"
				},
        "CreateHostedZone": {
					"default": "Create Route53 Hosted Zone"                    
        },
        "UseCortexDomain": {
            "default": "Use Cortex provided domain"
        },
        "Company": {
            "default": "Name for Cortex provided domain"
        },
        "apiKey": {
            "default": "Cortex provided domain API key"
        },
        "CreateDNSRecords": {
            "default": "Map FQDNs to Public/Elastic IPs in Route53"
        },                
				"DeployWindowsDC": {
					"default": "Deploy Windows DC"
                },
				"DeployWebVM": {
					"default": "Deploy Linux Web VM"
				},
				"DeployKali": {
					"default": "Deploy Kali VM"
				},
				"WebGenConfURL": {
					"default": "Web Generator Conf File URL"
                },
				"WebServerBuilderScriptURL": {
					"default": "Web Server Builder Script URL"
                },
				"WebServerBuilderScriptName": {
					"default": "Web Server Builder Script Name"
				},
        "NGFWConfigFile": {
            "default": "NGFW Configuration File Name"
        },
        "BuildScript": {
            "default": "Build Script File Name"
        },
        "keyPairPrefix": {
            "default": "EC2 KeyPair Prefix"
        }
			}
		}
	},
	"Parameters": {
		"BootstrapBucketName":{
			"Description": "S3 Bucket name for FW bootstrap configuration",
			"Type": "String",
            "Default": "cortexlab-ngfw"
		},
    "DevicesTimeZone":{
        "Description": "Firewall timezone",
        "Type": "String",
        "Default": "US/Pacific",
        "AllowedValues": [
            "Africa/Accra",
            "Africa/Addis_Ababa",
            "Africa/Algiers",
            "Africa/Asmara",
            "Africa/Asmera",
            "Africa/Bamako",
            "Africa/Bangui",
            "Africa/Banjul",
            "Africa/Bissau",
            "Africa/Blantyre",
            "Africa/Brazzaville",
            "Africa/Bujumbura",
            "Africa/Cairo",
            "Africa/Casablanca",
            "Africa/Ceuta",
            "Africa/Conakry",
            "Africa/Dakar",
            "Africa/Dar_es_Salaam",
            "Africa/Djibouti",
            "Africa/Douala",
            "Africa/El_Aaiun",
            "Africa/Freetown",
            "Africa/Gaborone",
            "Africa/Harare",
            "Africa/Johannesburg",
            "Africa/Kampala",
            "Africa/Khartoum",
            "Africa/Kigali",
            "Africa/Kinshasa",
            "Africa/Lagos",
            "Africa/Libreville",
            "Africa/Lome",
            "Africa/Luanda",
            "Africa/Lubumbashi",
            "Africa/Lusaka",
            "Africa/Malabo",
            "Africa/Maputo",
            "Africa/Maseru",
            "Africa/Mbabane",
            "Africa/Mogadishu",
            "Africa/Monrovia",
            "Africa/Nairobi",
            "Africa/Ndjamena",
            "Africa/Niamey",
            "Africa/Nouakchott",
            "Africa/Ouagadougou",
            "Africa/Porto-Novo",
            "Africa/Sao_Tome",
            "Africa/Timbuktu",
            "Africa/Tripoli",
            "Africa/Tunis",
            "Africa/Windhoek",
            "America/Adak",
            "America/Anchorage",
            "America/Anguilla",
            "America/Antigua",
            "America/Araguaina",
            "America/Argentina/Buenos_Aires",
            "America/Argentina/Catamarca",
            "America/Argentina/ComodRivadavia",
            "America/Argentina/Cordoba",
            "America/Argentina/Jujuy",
            "America/Argentina/La_Rioja",
            "America/Argentina/Mendoza",
            "America/Argentina/Rio_Gallegos",
            "America/Argentina/Salta",
            "America/Argentina/San_Juan",
            "America/Argentina/San_Luis",
            "America/Argentina/Tucuman",
            "America/Argentina/Ushuaia",
            "America/Aruba",
            "America/Asuncion",
            "America/Atikokan",
            "America/Atka",
            "America/Bahia",
            "America/Barbados",
            "America/Belem",
            "America/Belize",
            "America/Blanc-Sablon",
            "America/Boa_Vista",
            "America/Bogota",
            "America/Boise",
            "America/Buenos_Aires",
            "America/Cambridge_Bay",
            "America/Campo_Grande",
            "America/Cancun",
            "America/Caracas",
            "America/Catamarca",
            "America/Cayenne",
            "America/Cayman",
            "America/Chicago",
            "America/Chihuahua",
            "America/Coral_Harbour",
            "America/Cordoba",
            "America/Costa_Rica",
            "America/Cuiaba",
            "America/Curacao",
            "America/Danmarkshavn",
            "America/Dawson",
            "America/Dawson_Creek",
            "America/Denver",
            "America/Detroit",
            "America/Dominica",
            "America/Edmonton",
            "America/Eirunepe",
            "America/El_Salvador",
            "America/Ensenada",
            "America/Fortaleza",
            "America/Fort_Wayne",
            "America/Glace_Bay",
            "America/Godthab",
            "America/Goose_Bay",
            "America/Grand_Turk",
            "America/Grenada",
            "America/Guadeloupe",
            "America/Guatemala",
            "America/Guayaquil",
            "America/Guyana",
            "America/Halifax",
            "America/Havana",
            "America/Hermosillo",
            "America/Indiana/Indianapolis",
            "America/Indiana/Knox",
            "America/Indiana/Marengo",
            "America/Indiana/Petersburg",
            "America/Indianapolis",
            "America/Indiana/Tell_City",
            "America/Indiana/Vevay",
            "America/Indiana/Vincennes",
            "America/Indiana/Winamac",
            "America/Inuvik",
            "America/Iqaluit",
            "America/Jamaica",
            "America/Jujuy",
            "America/Juneau",
            "America/Kentucky/Louisville",
            "America/Kentucky/Monticello",
            "America/Knox_IN",
            "America/La_Paz",
            "America/Lima",
            "America/Los_Angeles",
            "America/Louisville",
            "America/Maceio",
            "America/Managua",
            "America/Manaus",
            "America/Marigot",
            "America/Martinique",
            "America/Mazatlan",
            "America/Mendoza",
            "America/Menominee",
            "America/Merida",
            "America/Mexico_City",
            "America/Miquelon",
            "America/Moncton",
            "America/Monterrey",
            "America/Montevideo",
            "America/Montreal",
            "America/Montserrat",
            "America/Nassau",
            "America/New_York",
            "America/Nipigon",
            "America/Nome",
            "America/Noronha",
            "America/North_Dakota/Center",
            "America/North_Dakota/New_Salem",
            "America/Panama",
            "America/Pangnirtung",
            "America/Paramaribo",
            "America/Phoenix",
            "America/Port-au-Prince",
            "America/Porto_Acre",
            "America/Port_of_Spain",
            "America/Porto_Velho",
            "America/Puerto_Rico",
            "America/Rainy_River",
            "America/Rankin_Inlet",
            "America/Recife",
            "America/Regina",
            "America/Resolute",
            "America/Rio_Branco",
            "America/Rosario",
            "America/Santarem",
            "America/Santiago",
            "America/Santo_Domingo",
            "America/Sao_Paulo",
            "America/Scoresbysund",
            "America/Shiprock",
            "America/St_Barthelemy",
            "America/St_Johns",
            "America/St_Kitts",
            "America/St_Lucia",
            "America/St_Thomas",
            "America/St_Vincent",
            "America/Swift_Current",
            "America/Tegucigalpa",
            "America/Thule",
            "America/Thunder_Bay",
            "America/Tijuana",
            "America/Toronto",
            "America/Tortola",
            "America/Vancouver",
            "America/Virgin",
            "America/Whitehorse",
            "America/Winnipeg",
            "America/Yakutat",
            "America/Yellowknife",
            "Antarctica/Casey",
            "Antarctica/Davis",
            "Antarctica/DumontDUrville",
            "Antarctica/Mawson",
            "Antarctica/McMurdo",
            "Antarctica/Palmer",
            "Antarctica/Rothera",
            "Antarctica/South_Pole",
            "Antarctica/Syowa",
            "Antarctica/Vostok",
            "Arctic/Longyearbyen",
            "Asia/Aden",
            "Asia/Almaty",
            "Asia/Amman",
            "Asia/Anadyr",
            "Asia/Aqtau",
            "Asia/Aqtobe",
            "Asia/Ashgabat",
            "Asia/Ashkhabad",
            "Asia/Baghdad",
            "Asia/Bahrain",
            "Asia/Baku",
            "Asia/Bangkok",
            "Asia/Beirut",
            "Asia/Bishkek",
            "Asia/Brunei",
            "Asia/Calcutta",
            "Asia/Choibalsan",
            "Asia/Chongqing",
            "Asia/Chungking",
            "Asia/Colombo",
            "Asia/Dacca",
            "Asia/Damascus",
            "Asia/Dhaka",
            "Asia/Dili",
            "Asia/Dubai",
            "Asia/Dushanbe",
            "Asia/Gaza",
            "Asia/Harbin",
            "Asia/Ho_Chi_Minh",
            "Asia/Hong_Kong",
            "Asia/Hovd",
            "Asia/Irkutsk",
            "Asia/Istanbul",
            "Asia/Jakarta",
            "Asia/Jayapura",
            "Asia/Jerusalem",
            "Asia/Kabul",
            "Asia/Kamchatka",
            "Asia/Karachi",
            "Asia/Kashgar",
            "Asia/Kathmandu",
            "Asia/Katmandu",
            "Asia/Kolkata",
            "Asia/Krasnoyarsk",
            "Asia/Kuala_Lumpur",
            "Asia/Kuching",
            "Asia/Kuwait",
            "Asia/Macao",
            "Asia/Macau",
            "Asia/Magadan",
            "Asia/Makassar",
            "Asia/Manila",
            "Asia/Muscat",
            "Asia/Nicosia",
            "Asia/Novokuznetsk",
            "Asia/Novosibirsk",
            "Asia/Omsk",
            "Asia/Oral",
            "Asia/Phnom_Penh",
            "Asia/Pontianak",
            "Asia/Pyongyang",
            "Asia/Qatar",
            "Asia/Qyzylorda",
            "Asia/Rangoon",
            "Asia/Riyadh",
            "Asia/Riyadh87",
            "Asia/Riyadh88",
            "Asia/Riyadh89",
            "Asia/Saigon",
            "Asia/Sakhalin",
            "Asia/Samarkand",
            "Asia/Seoul",
            "Asia/Shanghai",
            "Asia/Singapore",
            "Asia/Taipei",
            "Asia/Tashkent",
            "Asia/Tbilisi",
            "Asia/Tehran",
            "Asia/Tel_Aviv",
            "Asia/Thimbu",
            "Asia/Thimphu",
            "Asia/Tokyo",
            "Asia/Ujung_Pandang",
            "Asia/Ulaanbaatar",
            "Asia/Ulan_Bator",
            "Asia/Urumqi",
            "Asia/Vientiane",
            "Asia/Vladivostok",
            "Asia/Yakutsk",
            "Asia/Yekaterinburg",
            "Asia/Yerevan",
            "Atlantic/Azores",
            "Atlantic/Bermuda",
            "Atlantic/Canary",
            "Atlantic/Cape_Verde",
            "Atlantic/Faeroe",
            "Atlantic/Faroe",
            "Atlantic/Jan_Mayen",
            "Atlantic/Madeira",
            "Atlantic/Reykjavik",
            "Atlantic/South_Georgia",
            "Atlantic/Stanley",
            "Atlantic/St_Helena",
            "Australia/ACT",
            "Australia/Adelaide",
            "Australia/Brisbane",
            "Australia/Broken_Hill",
            "Australia/Canberra",
            "Australia/Currie",
            "Australia/Darwin",
            "Australia/Eucla",
            "Australia/Hobart",
            "Australia/LHI",
            "Australia/Lindeman",
            "Australia/Lord_Howe",
            "Australia/Melbourne",
            "Australia/North",
            "Australia/NSW",
            "Australia/Perth",
            "Australia/Queensland",
            "Australia/South",
            "Australia/Sydney",
            "Australia/Tasmania",
            "Australia/Victoria",
            "Australia/West",
            "Australia/Yancowinna",
            "Brazil/Acre",
            "Brazil/DeNoronha",
            "Brazil/East",
            "Brazil/West",
            "Canada/Atlantic",
            "Canada/Central",
            "Canada/Eastern",
            "Canada/East-Saskatchewan",
            "Canada/Mountain",
            "Canada/Newfoundland",
            "Canada/Pacific",
            "Canada/Saskatchewan",
            "Canada/Yukon",
            "CET",
            "Chile/Continental",
            "Chile/EasterIsland",
            "CST6CDT",
            "Cuba",
            "EET",
            "Egypt",
            "Eire",
            "EST",
            "EST5EDT",
            "Etc/GMT",
            "Etc/GMT0",
            "Etc/GMT-0",
            "Etc/GMT+0",
            "Etc/GMT-1",
            "Etc/GMT+1",
            "Etc/GMT-10",
            "Etc/GMT+10",
            "Etc/GMT-11",
            "Etc/GMT+11",
            "Etc/GMT-12",
            "Etc/GMT+12",
            "Etc/GMT-13",
            "Etc/GMT-14",
            "Etc/GMT-2",
            "Etc/GMT+2",
            "Etc/GMT-3",
            "Etc/GMT+3",
            "Etc/GMT-4",
            "Etc/GMT+4",
            "Etc/GMT-5",
            "Etc/GMT+5",
            "Etc/GMT-6",
            "Etc/GMT+6",
            "Etc/GMT-7",
            "Etc/GMT+7",
            "Etc/GMT-8",
            "Etc/GMT+8",
            "Etc/GMT-9",
            "Etc/GMT+9",
            "Etc/Greenwich",
            "Etc/UCT",
            "Etc/Universal",
            "Etc/UTC",
            "Etc/Zulu",
            "Europe/Amsterdam",
            "Europe/Andorra",
            "Europe/Athens",
            "Europe/Belfast",
            "Europe/Belgrade",
            "Europe/Berlin",
            "Europe/Bratislava",
            "Europe/Brussels",
            "Europe/Bucharest",
            "Europe/Budapest",
            "Europe/Chisinau",
            "Europe/Copenhagen",
            "Europe/Dublin",
            "Europe/Gibraltar",
            "Europe/Guernsey",
            "Europe/Helsinki",
            "Europe/Isle_of_Man",
            "Europe/Istanbul",
            "Europe/Jersey",
            "Europe/Kaliningrad",
            "Europe/Kiev",
            "Europe/Lisbon",
            "Europe/Ljubljana",
            "Europe/London",
            "Europe/Luxembourg",
            "Europe/Madrid",
            "Europe/Malta",
            "Europe/Mariehamn",
            "Europe/Minsk",
            "Europe/Monaco",
            "Europe/Moscow",
            "Europe/Nicosia",
            "Europe/Oslo",
            "Europe/Paris",
            "Europe/Podgorica",
            "Europe/Prague",
            "Europe/Riga",
            "Europe/Rome",
            "Europe/Samara",
            "Europe/San_Marino",
            "Europe/Sarajevo",
            "Europe/Simferopol",
            "Europe/Skopje",
            "Europe/Sofia",
            "Europe/Stockholm",
            "Europe/Tallinn",
            "Europe/Tirane",
            "Europe/Tiraspol",
            "Europe/Uzhgorod",
            "Europe/Vaduz",
            "Europe/Vatican",
            "Europe/Vienna",
            "Europe/Vilnius",
            "Europe/Volgograd",
            "Europe/Warsaw",
            "Europe/Zagreb",
            "Europe/Zaporozhye",
            "Europe/Zurich",
            "Factory",
            "GB",
            "GB-Eire",
            "GMT",
            "GMT0",
            "GMT-0",
            "GMT+0",
            "Greenwich",
            "Hongkong",
            "HST",
            "Iceland",
            "Indian/Antananarivo",
            "Indian/Chagos",
            "Indian/Christmas",
            "Indian/Cocos",
            "Indian/Comoro",
            "Indian/Kerguelen",
            "Indian/Mahe",
            "Indian/Maldives",
            "Indian/Mauritius",
            "Indian/Mayotte",
            "Indian/Reunion",
            "Iran",
            "Israel",
            "Jamaica",
            "Japan",
            "Kwajalein",
            "Libya",
            "MET",
            "Mexico/BajaNorte",
            "Mexico/BajaSur",
            "Mexico/General",
            "Mideast/Riyadh87",
            "Mideast/Riyadh88",
            "Mideast/Riyadh89",
            "MST",
            "MST7MDT",
            "Navajo",
            "NZ",
            "NZ-CHAT",
            "Pacific/Apia",
            "Pacific/Auckland",
            "Pacific/Chatham",
            "Pacific/Easter",
            "Pacific/Efate",
            "Pacific/Enderbury",
            "Pacific/Fakaofo",
            "Pacific/Fiji",
            "Pacific/Funafuti",
            "Pacific/Galapagos",
            "Pacific/Gambier",
            "Pacific/Guadalcanal",
            "Pacific/Guam",
            "Pacific/Honolulu",
            "Pacific/Johnston",
            "Pacific/Kiritimati",
            "Pacific/Kosrae",
            "Pacific/Kwajalein",
            "Pacific/Majuro",
            "Pacific/Marquesas",
            "Pacific/Midway",
            "Pacific/Nauru",
            "Pacific/Niue",
            "Pacific/Norfolk",
            "Pacific/Noumea",
            "Pacific/Pago_Pago",
            "Pacific/Palau",
            "Pacific/Pitcairn",
            "Pacific/Ponape",
            "Pacific/Port_Moresby",
            "Pacific/Rarotonga",
            "Pacific/Saipan",
            "Pacific/Samoa",
            "Pacific/Tahiti",
            "Pacific/Tarawa",
            "Pacific/Tongatapu",
            "Pacific/Truk",
            "Pacific/Wake",
            "Pacific/Wallis",
            "Pacific/Yap",
            "Poland",
            "Portugal",
            "PRC",
            "PST8PDT",
            "ROC",
            "ROK",
            "Singapore",
            "Turkey",
            "UCT",
            "Universal",
            "US/Alaska",
            "US/Aleutian",
            "US/Arizona",
            "US/Central",
            "US/Eastern",
            "US/East-Indiana",
            "US/Hawaii",
            "US/Indiana-Starke",
            "US/Michigan",
            "US/Mountain",
            "US/Pacific",
            "US/Samoa",
            "UTC",
            "WET",
            "W-SU",
            "Zulu"                
        ]
    },
		"BootstrapBucketRegion":{
			"Description": "S3 Region where the FW bootstrap bucket is located",
			"Type": "String",
            "AllowedValues": [
				"ap-south-1",
				"eu-west-2",
				"eu-west-1",
				"ap-northeast-2",
				"ap-northeast-1",
				"sa-east-1",
				"ca-central-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"eu-central-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
            ],
			"Default" : "us-east-1"
		},
		"EnvironmentBucketName":{
			"Description": "Bucket name for non-Firewall configuration",
			"Type": "String",
            "Default": "cortexlab-conf"
		},

		"EnvironmentBucketRegion":{
			"Description": "S3 Region where the Environment bucket is located",
			"Type": "String",
            "AllowedValues": [
				"ap-south-1",
				"eu-west-2",
				"eu-west-1",
				"ap-northeast-2",
				"ap-northeast-1",
				"sa-east-1",
				"ca-central-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"eu-central-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
            ],
			"Default" : "us-east-1"
        },
    
		"ADTemplateFile":{
			"Description": "CloudFormation Template Path for Windows Domain Controller deployment",
			"Type": "String",
			"Default" : "templates/ad-1-v3.json"
        },

      "WebVMTemplateFile":{
			"Description": "CloudFormation Template Path for Web Server VM deployment",
			"Type": "String",
			"Default" : "templates/webvm-v1.json"
      },
	
		"ServerKeyName": {
		  "Description": "Name of an existing EC2 KeyPair to enable SSH access to VMs. Except NGFW",
		  "Type": "AWS::EC2::KeyPair::KeyName"
		},

		"AdminPassword": {
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"Description": "Password for NGFW admin user, VPN user, Windows DC admin and users. Must be at least 8 characters containing letters, numbers and symbols",
			"MaxLength": "31",
			"MinLength": "8",
			"NoEcho": "true",
			"Type": "String"
		},

		"PSK":{
			"Description": "Cortex Data Lake Pre Shared Key (retrieved from Cortex hub, or 'disabled' if not used)",
			"Type": "String"
		},

		"AuthCode1":{
			"Description": "VM-Series Capacity Licence AuthCode (SKU: PAN-VM-100-NFR)",
			"Type": "String"
		},

		"AuthCode2":{
			"Description": "VM-Series Bundle AuthCode (SKU: PAN-VM-100-BND-NFR4)",
			"Type": "String"
		},

		"AppHostedZone": {
			"Description": "DNS Domain Name or Route53 Hosted Zone Name (i.e. cortex.mycompany.com)",
      "Type": "String",
			"MaxLength": "32",
			"MinLength": "3"
		},

		"DataLakeRegion": {
			"Description": "Cortex Data Lake Region",
      "Type": "String",
			"AllowedValues": [
				"americas",
				"europe"
			],
			"Default": "americas"
    },

		"VPNUserName": {
			"Description": "Global Protect VPN User Name",
      "Type": "String",
			"MaxLength": "16",
			"MinLength": "3"
		},
  
		"BuilderHostname":{
			"Description": "Provisioning VM Hostname",
			"Type": "String",
			"Default": "builder"		
		},

		"FirewallHostname":{
			"Description": "Firewall Hostname (Management Interface)",
			"Type": "String",
			"Default": "ngfw"		
		},

		"PublicHostname":{
			"Description": "Public IP Hostname (Firewall Public Interface)",
			"Type": "String",
			"Default": "public"		
		},

		"KaliHostname":{
			"Description": "Kali Linux VM Hostname",
			"Type": "String",
			"Default": "kali"
		},

		"FirewallCertURL":{
			"Description": "Firewall CA Certificate for SSL Decryption (download URL)",
			"Type": "String",
			"Default": "https://s3.amazonaws.com/cortexlab-conf/opt/cortexlabca.pem"
		},

		"PanOSVersion":{
			"Description": "NGFW Version",
			"Type": "String",
			"Default": "9.0.2"
        },

		"AnsibleRepo":{
			"Description": "Ansible Pan Repository URL",
			"Type": "String",
			"Default": "git+https://github.com/fvigo/ansible-pan.git"
		},

		"DomainNetBIOSName": {
			"AllowedPattern": "[a-zA-Z0-9\\-]+",
			"Default": "CORTEXLAB",
			"Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows (i.e. CORTEXLAB)",
			"MaxLength": "15",
			"MinLength": "1",
			"Type": "String"
		},

		"CreateHostedZone": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "false",
			"Description": "Create Hosted Zone in Route53",
			"Type": "String"
        },

		"UseCortexDomain": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "false",
			"Description": "Use Cortex provided domain? (if you don't have your own domain)",
			"Type": "String"
        },
		"Company": {
            "Description": "Your company name for Cortex provided domain (yourcompany.dev.cortexlabs.rocks) [alphanum, no spaces, lowercase, min 3 max 16 chars]",
			"AllowedPattern": "[a-z0-9_\\-]*",
			"MaxLength": "16",
            "Type": "String"
        },
        "apiKey": {
            "Description": "API Key (provided by Palo Alto Networks) for Cortex provided domain",
            "Type": "String",
			"NoEcho": "true"
        },

		"CreateDNSRecords": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Dynamically map FQDNs to Public/Elastic IPs using Route53?",
			"Type": "String"
        },
        
		"DeployWindowsDC": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "false",
			"Description": "Deploy W2012R2 Domain Controller?",
			"Type": "String"
        },
		"DeployWebVM": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Deploy Linux Web Server VM?",
			"Type": "String"
		},
		"DeployKali": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Deploy Kali Linux VM?",
			"Type": "String"
		},
        "ADServer1InstanceType": {
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.large",
            "Description": "Amazon EC2 instance type for the Windows Domain Controller instance",
            "Type": "String"
        },
        "ADServer1NetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "Default": "DC1",
            "Description": "NetBIOS name of the Windows Server (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainAdminUser": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Default": "developer",
            "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
            "MaxLength": "25",
            "MinLength": "5",
            "Type": "String"
        },
        "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
            "Default": "cortexlab.local",
            "Description": "Fully qualified domain name (FQDN) of the AD root domain (i.e. cortexlab.local)",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "quickstart-microsoft-activedirectory/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RestoreModePassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "False",
			"Default": "PaL04Lt0!",
            "Type": "String"
        },

		"WebGenConfURL": {
			"Type": "String",
			"Description": "Web Traffic Generator Configuration File URL",
			"Default": "https://s3.amazonaws.com/cortexlab-conf/opt/webgenconfig.py"
		},

		"WebServerBuilderScriptURL": {
			"Type": "String",
			"Description": "Web Server Builder Script URL",
			"Default": "https://s3.amazonaws.com/cortexlab-conf/opt/webbuild.sh"
		},

        "WebServerBuilderScriptName": {
			"Type": "String",
			"Description": "Web Server Builder Script Name",
			"Default": "webbuild.sh"
		},

        "NGFWConfigFile": {
			"Type": "String",
			"Description": "NGFW Config File Name",
			"Default": "cortexlab.xml"
        },
        "BuildScript": {
			"Type": "String",
			"Description": "Build Script File Name",
			"Default": "build.sh"
        },
        "keyPairPrefix": {
            "Description": "EC2 NGFW Key Pair Prefix",
            "Type": "String",
            "Default": "cortexlab"
        }
	},
	"Mappings": {
		"LambdaBucketsRegionMap" : {
      "eu-north-1" : {"Bucket": "cortexlab-lambdas-eu-north-1" },
      "ap-south-1" : {"Bucket": "cortexlab-lambdas-ap-south-1" },
      "eu-west-3" : {"Bucket": "cortexlab-lambdas-eu-west-3" },
      "eu-west-2" : {"Bucket": "cortexlab-lambdas-eu-west-2" },
      "eu-west-1" : {"Bucket": "cortexlab-lambdas-eu-west-1" },
      "ap-northeast-2" : {"Bucket": "cortexlab-lambdas-ap-northeast-2" },
      "ap-northeast-1" : {"Bucket": "cortexlab-lambdas-ap-northeast-1" },
      "sa-east-1" : {"Bucket": "cortexlab-lambdas-sa-east-1" },
      "ca-central-1" : {"Bucket": "cortexlab-lambdas-ca-central-1" },
      "ap-southeast-1" : {"Bucket": "cortexlab-lambdas-ap-southeast-1" },
      "ap-southeast-2" : {"Bucket": "cortexlab-lambdas-ap-southeast-2" },
      "eu-central-1" : {"Bucket": "cortexlab-lambdas-eu-central-1" },
      "us-east-1" : {"Bucket": "cortexlab-lambdas-us-east-1" },
      "us-east-2" : {"Bucket": "cortexlab-lambdas-us-east-2" },
      "us-west-1" : {"Bucket": "cortexlab-lambdas-us-west-1" },
      "us-west-2" : {"Bucket": "cortexlab-lambdas-us-west-2" }
		},
		"PANFWRegionMap" : {
      "eu-north-1": { "AMI": "ami-0e89415612766ca95" },
      "ap-south-1": { "AMI": "ami-03d6a93f3b941f9ba" },
      "eu-west-3": { "AMI": "ami-03090db9cf7328f67" },
      "eu-west-2": { "AMI": "ami-05105e799b3dcdb5a" },
      "eu-west-1": { "AMI": "ami-01ba9318a26544dfa" },
      "ap-northeast-2": { "AMI": "ami-0ae362de1052db35c" },
      "ap-northeast-1": { "AMI": "ami-0edbed35e049f247b" },
      "sa-east-1": { "AMI": "ami-06b5070e8730a3983" },
      "ca-central-1": { "AMI": "ami-0d4e1ef886083f3aa" },
      "ap-southeast-1": { "AMI": "ami-0a59aafbea08f2a93" },
      "ap-southeast-2": { "AMI": "ami-09df8ff40e5ec5a3e" },
      "eu-central-1": { "AMI": "ami-0650e21e30a07335d" },
      "us-east-1": { "AMI": "ami-0d952f6fcedfc9e56" },
      "us-east-2": { "AMI": "ami-02a6e3a3db23bef95" },
      "us-west-1": { "AMI": "ami-090762cb90892c713" },
      "us-west-2": { "AMI": "ami-004065389303a6ada" }
		},
        
		 "KaliRegionMap" : {
      "eu-north-1": { "AMI": "ami-0821244d2425073c8" },
      "ap-south-1": { "AMI": "ami-000768b940a99f411" },
      "eu-west-3": { "AMI": "ami-0ffa295e7218ce1bc" },
      "eu-west-2": { "AMI": "ami-058b7432ca3ded532" },
      "eu-west-1": { "AMI": "ami-0b7668b6cfbce14eb" },
      "ap-northeast-2": { "AMI": "ami-0868dbaf331ab0c66" },
      "ap-northeast-1": { "AMI": "ami-0c69eef9aab10d634" },
      "sa-east-1": { "AMI": "ami-00a3342e584c2787e" },
      "ca-central-1": { "AMI": "ami-0e4c487d505940012" },
      "ap-southeast-1": { "AMI": "ami-0e0b21c2d1cf7ad01" },
      "ap-southeast-2": { "AMI": "ami-07b1e4064c37c9794" },
      "eu-central-1": { "AMI": "ami-01f66bd906941fa84" },
      "us-east-1": { "AMI": "ami-08c8387e171a3d095" },
      "us-east-2": { "AMI": "ami-09768c2be66e27888" },
      "us-west-1": { "AMI": "ami-0f71b9908e9042472" },
      "us-west-2": { "AMI": "ami-0a6335995610caf00" }
		},

		"RHELRegionMap" : {
      "eu-north-1": { "AMI": "ami-00b58289121a373eb" },
      "ap-south-1": { "AMI": "ami-076c98a5e1ae50b38" },
      "eu-west-3": { "AMI": "ami-0ecd678c334f50475" },
      "eu-west-2": { "AMI": "ami-014ec3973fd627c70" },
      "eu-west-1": { "AMI": "ami-0dc09040ff55c0cae" },
      "ap-northeast-2": { "AMI": "ami-01d1eee3b48c9ad02" },
      "ap-northeast-1": { "AMI": "ami-038a794b902fa0afc" },
      "sa-east-1": { "AMI": "ami-0c8c472213613e73a" },
      "ca-central-1": { "AMI": "ami-045a1fd6de0a3b39e" },
      "ap-southeast-1": { "AMI": "ami-030191cbee64dcc9f" },
      "ap-southeast-2": { "AMI": "ami-0c854fdd51006d91a" },
      "eu-central-1": { "AMI": "ami-02ab606eae7264892" },
      "us-east-1": { "AMI": "ami-08e923f2f38197e46" },
      "us-east-2": { "AMI": "ami-0aaba9ba5c26d33c7" },
      "us-west-1": { "AMI": "ami-0b3f30648b83fb82e" },
      "us-west-2": { "AMI": "ami-0be2c515a090d16b0" }
		}
	},
	"Conditions" : {
    "ConfDeployKali" : {"Fn::Equals" : [{"Ref" : "DeployKali"}, "true"]},
    "ConfDeployWebVM": {"Fn::Equals" : [{"Ref" : "DeployWebVM"}, "true"]},
		"CreateDNSHostedZone" : {"Fn::Equals" : [{"Ref" : "CreateHostedZone"}, "true"]},
    "CreateR53Records" : {"Fn::Equals" : [{"Ref" : "CreateDNSRecords"}, "true"]},
		"ConfWinDC" : {"Fn::Equals" : [{"Ref" : "DeployWindowsDC"}, "true"]},	
    "KaliFQDNCondition": {"Fn::And": [{"Condition": "ConfDeployKali"}, {"Condition": "CreateR53Records" }]},
    "CreateVendorDomain": {"Fn::And": [{"Fn::Equals" : [{"Ref" : "UseCortexDomain"}, "true"]}, {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "Company"}]}]}, {"Condition": "CreateDNSHostedZone"},  {"Condition": "CreateR53Records"}, {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "Company"}]}]}]}
  },
  "Resources": {
	"DomainControllerTemplate": {
		"Type" : "AWS::CloudFormation::Stack",
		"Condition" : "ConfWinDC",
		"Properties" : {
			"Parameters" : {
				"ADServer1InstanceType": {"Ref":"ADServer1InstanceType"},
				"ADServer1NetBIOSName": {"Ref":"ADServer1NetBIOSName"},
				"ADServer1PrivateIP": "10.0.1.20",
				"GatewayIP": "10.0.1.11",
				"DomainAdminPassword": {"Ref":"AdminPassword"},
				"DomainAdminUser": {"Ref":"DomainAdminUser"},
				"DomainDNSName": {"Ref":"DomainDNSName"},
				"DomainNetBIOSName": {"Ref":"DomainNetBIOSName"},
				"KeyPairName": {"Ref":"ServerKeyName"},
				"PrivateSubnet1CIDR": "10.0.1.0/24",
				"PrivateSubnet1ID": {"Ref": "NewWebSubnet"},
				"PublicSubnet1CIDR": "10.0.0.0/24",
				"SecurityGroupWideOpen": {"Ref": "sgWideOpen"},
				"QSS3BucketName": {"Ref":"QSS3BucketName"},
				"QSS3KeyPrefix": {"Ref":"QSS3KeyPrefix"},
				"RestoreModePassword": {"Ref":"RestoreModePassword"},
				"VPCCIDR": "10.0.0.0/16",
				"VPCID": {"Ref": "NewVPC"},
				"FirewallCertURL":{"Ref":"FirewallCertURL"}			
			},
			"TemplateURL" : { "Fn::Join" : ["", [
				"https://s3.amazonaws.com/",   { "Fn::Join" : [ "", [ {"Ref" : "EnvironmentBucketName"}, "/", {"Ref" : "ADTemplateFile"} ] ] }
			]]},
			"TimeoutInMinutes" : 60
		},
        "DependsOn": [ "BuilderLinuxInstance"]
    },
	"WebVMTemplate": {
		"Type" : "AWS::CloudFormation::Stack",
		"Condition" : "ConfDeployWebVM",
		"Properties" : {
			"Parameters" : {
				"EnvironmentBootInstanceProfile": {"Ref":"EnvironmentBootInstanceProfile"},
				"NewWebSubnet": {"Ref": "NewWebSubnet"},
				"PrivateIPAddress": "10.0.1.101",
				"sgWideOpen": {"Ref": "sgWideOpen"},
				"ServerKeyName": {"Ref": "ServerKeyName"},
				"FirewallCertURL":{"Ref":"FirewallCertURL"},
				"FirewallMgmtIP": {"Fn::GetAtt" : [ "FWManagementNetworkInterface", "PrimaryPrivateIpAddress" ]},
				"FirewallIntIP": {"Fn::GetAtt" : [ "FWPrivate12NetworkInterface", "PrimaryPrivateIpAddress" ]},
        "AdminPassword": {"Ref" : "AdminPassword" },
				"DomainNetBIOSName": {"Ref" : "DomainNetBIOSName" },
				"WebGenConfURL": {"Ref" : "WebGenConfURL" },
				"WebServerBuilderScriptName": {"Ref" : "WebServerBuilderScriptName" },
				"WebServerBuilderScriptURL": {"Ref" : "WebServerBuilderScriptURL" }
			},
			"TemplateURL" : { "Fn::Join" : ["", [
				"https://s3.amazonaws.com/",   { "Fn::Join" : [ "", [ {"Ref" : "EnvironmentBucketName"}, "/", {"Ref" : "WebVMTemplateFile"} ] ] }
			]]},
			"TimeoutInMinutes" : 60
		},
        "DependsOn": [ "BuilderLinuxInstance", "FWManagementNetworkInterface"]
    },
    "LambdaR53Role": {
        "Type": "AWS::IAM::Role",
        "Condition" : "CreateVendorDomain",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version" : "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [ "lambda.amazonaws.com" ]
                    },
                    "Action": [ "sts:AssumeRole" ]
                }]
            },
            "ManagedPolicyArns": [
                { "Ref": "R53GetHostedZonePolicy" },
                { "Ref": "LambdaExecutionPolicy"}
            ]
        }
    },
    "RegisterDNSFunction": {
        "Type": "AWS::Lambda::Function",
        "Condition" : "CreateVendorDomain",
        "Properties": {
            "Code": {
                "S3Bucket": { "Fn::FindInMap" : [ "LambdaBucketsRegionMap", { "Ref" : "AWS::Region" }, "Bucket" ] },
                "S3Key": "lambdas.zip"
            },
            "Description": "Register DNS subdomain in dev.cortexlabs.rocks",
            "Handler": "index.getRoute53",
            "Role": {"Fn::GetAtt" : [ "LambdaR53Role", "Arn" ] },
            "Runtime": "nodejs12.x",
            "Timeout": 30
        },
        "DependsOn": [
            "LambdaR53Role"
        ]
    },
    "registerDNS": {
        "Type": "Custom::RunRegisterDNS",
        "Condition" : "CreateVendorDomain",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["RegisterDNSFunction", "Arn"] },
            "company": {"Ref": "Company"},
            "apiKey": { "Ref": "apiKey"},
            "DNSZone": {"Ref": "DNSZone" }
        },
        "DependsOn": [
            "DNSZone",
            "RegisterDNSFunction"
        ]
    },
    "R53GetHostedZonePolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Condition" : "CreateVendorDomain",
        "Properties": {
            "Description" : "Lambda Execution Policy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "route53:GetHostedZone",
                        "Resource": { 
                            "Fn::Sub" : [
                                "arn:aws:route53:::hostedzone/${zoneid}",
                                { "zoneid" : { "Ref": "DNSZone" }}
                            ]
                        }
                    }
                ]
            }
        },
        "DependsOn": [
            "DNSZone"
        ]
    },
    "DNSZone" : {
        "Type" : "AWS::Route53::HostedZone",
        "Condition" : "CreateDNSHostedZone",
        "Properties": {
            "HostedZoneConfig": {
              "Comment": "Cortex Lab Hosted Zone"
            },
            "Name":  {
                "Fn::If": 
                    [ 
                        "CreateVendorDomain",
                        {
                            "Fn::Sub" : [
                                "${company}.dev.cortexlabs.rocks",
                                { "company": {"Ref": "Company"}}
                            ]
                        },
                        { "Ref" : "AppHostedZone"}
                    ]
            }
        }
    },    
    "BootstrapRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "BootstrapRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" }]]}
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" } , "/*" ]]}
                    },
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" }]]}
                    },					
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },						
					{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" } , "/*" ]]}
                    }
					]
                }
            }]
        }
    },
    "BootstrapInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "BootstrapRole"
            }]
        }
    },

   "EnvironmentBootRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "EnvironmentBootRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [
					{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },
					{
                        "Effect": "Allow",
                        "Action": "s3:GetBucketLocation",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" }]]}
                    },						
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "EnvironmentBucketName" } , "/*" ]]}
                    }
					]
                }
            }]
        }
    },
    "EnvironmentBootInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "EnvironmentBootRole"
            }]
        }
    },	

    "NewVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{ "Key": "Name", "Value": "CortexLab VPC" }]
      }
    },

    "PublicElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "ManagementElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "NewPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {"Ref": "NewVPC"},
        "AvailabilityZone": "",
        "Tags": [{ "Key": "Name", "Value": "CortexLab Ext Subnet" }]
      },
      "DependsOn": [ "NewVPC" ]
    },

    "NewWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Fn::GetAtt" : [ "NewPublicSubnet", "AvailabilityZone" ] },
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "CortexLab Int Subnet" }]
      },
      "DependsOn":[ "NewVPC", "NewPublicSubnet" ]
    },

    "igweb": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "CortexLab Internet GW" }]
      }
    },

    "DHCPOptions1": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {"Fn::Join" : [ "", [ { "Ref" : "BootstrapBucketRegion" }, ".compute.internal" ] ] }, 
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "aclb765d6d2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb059a2460": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb049a2461": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "FWManagementNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 MGMT",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.99",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "CortexLab NGFW Mgmt Intf"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPublicNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/1",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.100",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "CortexLab NGFW Ext Intf E1/1"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate12NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/2",
        "SubnetId": {"Ref": "NewWebSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.1.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "CortexLab NGFW Int Intf E1/2"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

     "FWEIPMAnagementAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "ManagementElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface" }
       },
       "DependsOn": [ "FWManagementNetworkInterface", "ManagementElasticIP", "gw1", "FWInstance" ]
    },

    "FWEIPPublicAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "PublicElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface" }
       },
       "DependsOn": [ "FWPublicNetworkInterface", "PublicElasticIP", "gw1", "FWInstance" ]
    },

    "sgWideOpen": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CortexLab NGFW Security Group",
        "VpcId": {"Ref": "NewVPC"},
         "Tags": [{"Key": "Name","Value": "CortexLab NGFW SG"}],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
          ]
      }
    },

	"sgBuilder": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "Provisioning VM",
			"VpcId": {"Ref": "NewVPC"},
			"SecurityGroupIngress": [
				{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				}
			],
			"SecurityGroupEgress" : [
			  {
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			  }
			]
		}
	},

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewWebSubnet"}
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "InternetGatewayId": {"Ref": "igweb"}
      }
    },

    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "rtb049a2461"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb059a2460"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb049a2461"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "DhcpOptionsId": {"Ref": "DHCPOptions1"}
      }
    },

    "FWInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "IamInstanceProfile": {"Ref": "BootstrapInstanceProfile"},
        "InstanceInitiatedShutdownBehavior": "stop",
        "EbsOptimized": "true",
        "ImageId": { "Fn::FindInMap" : [ "PANFWRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "m4.xlarge",
        "BlockDeviceMappings" :
        [
            {
              "DeviceName" : "/dev/xvda",
              "Ebs" :
              {
                "VolumeType" : "gp2",
                "DeleteOnTermination" : "true",
                "VolumeSize" : "60"
              }
            }
        ],
        "KeyName":   { "Fn::GetAtt": ["handleKeyPair", "keyName"]},
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "CortexLab Firewall" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface"},
            "DeviceIndex": 0
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface"},
            "DeviceIndex": 1
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate12NetworkInterface"},
            "DeviceIndex": 2
          }
        ],
        "UserData":  { "Fn::Base64" : { "Fn::Join" : ["", [
            "vmseries-bootstrap-aws-s3bucket=",  { "Ref" : "BootstrapBucketName" }
        ]]}}
      },
      "DependsOn": [ "FWPublicNetworkInterface", "FWPrivate12NetworkInterface",  "NewPublicSubnet", "handleKeyPair" ]
    },

    "KaliLinuxInstance": {
      "Type": "AWS::EC2::Instance",
  	  "Condition" : "ConfDeployKali",	  
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "KaliRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "CortexLab Kali Linux" }],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "Description": "Kali Network Interface",
            "SubnetId": {"Ref": "NewPublicSubnet"},
            "PrivateIpAddresses": [
                {
                  "PrivateIpAddress": "10.0.0.88",
                  "Primary": "true"
                }
            ],
            "GroupSet": [{"Ref": "sgWideOpen"}],
            "DeviceIndex": 0
          }
        ]
 	  },
     "DependsOn": [ "NewPublicSubnet", "sgWideOpen" ]
 	},

     "BuilderLinuxInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "IamInstanceProfile": {"Ref": "EnvironmentBootInstanceProfile"},
        "ImageId": { "Fn::FindInMap" : [ "RHELRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.small",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "CortexLab Provisioning VM" }],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": 0,
            "Description": "Provisioning VM Network Interface",
            "SubnetId": {"Ref": "NewPublicSubnet"},
            "PrivateIpAddresses": [
                {
                  "PrivateIpAddress": "10.0.0.55",
                  "Primary": "true"
                }
            ],
            "GroupSet": [{"Ref": "sgBuilder"}]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
			"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "sleep 10s\n",
            "\n# Install all required software\n",			
            "yum install -y wget git\n",
			"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '%{rhel}').noarch.rpm\n",
			"yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n",
			"yum -y install python36u-devel\n",
			"sleep 2s\n",
            "yum -y install python36u-pip\n",
            "pip3.6 install boto3 awscli paramiko ansible requests requests_toolbelt\n",
            "ln -s /bin/pip3.6 /bin/pip3\n",
            "/usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
            "\n# Install Ansible Galaxy component\n",
            "ansible-galaxy install \"",{"Ref" : "AnsibleRepo" },"\"\n",
            "\n# Populate environment vars\n",
            "export DEPLOYPATH=/tmp/deploy\n",
            "ENCPWD=\"",{ "Fn::Base64" : {"Ref" : "AdminPassword" } },"\"\n",
      			"export ADMINPWD=$(echo \"${ENCPWD}\" | /usr/bin/base64 -d -)\n",
            "export AUTHCODE1=\"",{"Ref" : "AuthCode1" },"\"\n",
            "export AUTHCODE2=\"",{"Ref" : "AuthCode2" },"\"\n",
            "if [ ! ${AUTHCODE2} ]; then export AUTHCODE2=${AUTHCODE1}; fi;\n",
            "export NGFWCONFIGFILE=\"",{"Ref" : "NGFWConfigFile" },"\"\n",
            "export S3BUCKETNAME=\"",{"Ref" : "EnvironmentBucketName" },"\"\n",
            "export S3BUCKETREGION=\"",{"Ref" : "EnvironmentBucketRegion" },"\"\n",
            "export PANOSVERSION=\"",{"Ref" : "PanOSVersion" },"\"\n",
			      "export DATALAKEREGION=\"",{"Ref" : "DataLakeRegion" },"\"\n",
			      "export PSK=\"",{"Ref" : "PSK" },"\"\n",
			      "export VPNUSERNAME=\"",{"Ref" : "VPNUserName" },"\"\n",
            "export FIREWALLHOSTNAME=\"",{"Ref" : "FirewallHostname" },"\"\n",
            "export DOMAINNAME=\"",{ "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]},"\"\n",
            "export DEVICESTIMEZONE=\"",{"Ref" : "DevicesTimeZone" },"\"\n",
			      "export FIREWALLIP=\"",{"Fn::GetAtt" : [ "FWManagementNetworkInterface", "PrimaryPrivateIpAddress" ]},"\"\n",
			      "export PUBLICIP=\"",{ "Ref" : "PublicElasticIP" },"\"\n",
            "export BUILDSCRIPT=\"",{"Ref" : "BuildScript" },"\"\n",
            "export SELF=\"BuilderLinuxInstance\"\n",
            "export AWSSTACKNAME=\"",{"Ref" : "AWS::StackName" },"\"\n",
            "export AWSREGION=\"",{"Ref" : "AWS::Region" },"\"\n",
            "\n# Create deploy path\n",
            "mkdir -p ${DEPLOYPATH}\n",
            "\n# Prepare EC2 key file\n",
            "cat > ${DEPLOYPATH}/key.pem << _EOF_\n",
            { "Fn::GetAtt": ["handleKeyPair", "keyPair"]},
            "\n_EOF_\n",
            "chmod 400 ${DEPLOYPATH}/key.pem\n",
            "\n# Prepare ansible vars file\n",
            "rm -f ${DEPLOYPATH}/vars.yml\n",
            "echo ngfw_ip: \\'${FIREWALLIP}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo admin_username: \\'admin\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo admin_password: \\'${ADMINPWD}\\' >> ${DEPLOYPATH}/vars.yml\n",      
            "echo key_filename: \\'${DEPLOYPATH}/key.pem\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo authcode1: \\'${AUTHCODE1}\\' >> ${DEPLOYPATH}/vars.yml\n",  
            "echo authcode2: \\'${AUTHCODE2}\\' >> ${DEPLOYPATH}/vars.yml\n",      
            "echo panos_version: \\'${PANOSVERSION}\\' >> ${DEPLOYPATH}/vars.yml\n",       
            "echo datalake_region: \\'${DATALAKEREGION}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo datalake_psk: \\'${PSK}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo localuser_name: \\'${VPNUSERNAME}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo localuser_newpassword: \\'${ADMINPWD}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo external_ip: \\'${PUBLICIP}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "echo ngfw_config_file: \\'${DEPLOYPATH}/${NGFWCONFIGFILE}\\' >> ${DEPLOYPATH}/vars.yml\n",      
            "echo ngfw_hostname: \\'${FIREWALLHOSTNAME}\\' >> ${DEPLOYPATH}/vars.yml\n",      
            "echo ngfw_domain: \\'${DOMAINNAME}\\' >> ${DEPLOYPATH}/vars.yml\n",      
            "echo ngfw_timezone: \\'${DEVICESTIMEZONE}\\' >> ${DEPLOYPATH}/vars.yml\n",
            "chmod 400 ${DEPLOYPATH}/vars.yml\n",
            "\n# Prepare source file\n",
            "rm -f ${DEPLOYPATH}/vars.sh\n",
            "echo \"#!/bin/bash\" >> ${DEPLOYPATH}/vars.sh\n",
            "echo DEPLOYPATH=\\\"${DEPLOYPATH}\\\" >> ${DEPLOYPATH}/vars.sh\n",
            "chmod +x ./${DEPLOYPATH}/vars.sh\n",
            "\n# Download Deployment scripts from S3\n",
            "aws --region ${S3BUCKETREGION} s3 cp --recursive s3://${S3BUCKETNAME}/deploy ${DEPLOYPATH}\n",
            "\n# Start build script\n",
            "cd ${DEPLOYPATH}\n",
            "if [ ! -f ${DEPLOYPATH}/${BUILDSCRIPT} ] ; then /opt/aws/bin/cfn-signal -s false --stack ",{"Ref": "AWS::StackName"}," --region ", {"Ref": "AWS::Region"}, " --resource ${SELF} -r 'No deployment script found'; fi\n",
            "chmod +x ${DEPLOYPATH}/${BUILDSCRIPT}\n",
            "#/opt/aws/bin/cfn-signal -s true --stack ",{"Ref": "AWS::StackName"}," --region ", {"Ref": "AWS::Region"}, " --resource ${SELF}\n",
            "./${BUILDSCRIPT}\n",
            "\n# Cleanup (done in the script, redundant here)\n",
			"#rm -f ${DEPLOYPATH}/vars.yml\n",
			"#rm -f ${DEPLOYPATH}/key.pem\n"
          ]]}
        }		
      },
      "CreationPolicy": {
        "ResourceSignal": {
            "Timeout": "PT1H"
        }
      },
      "DependsOn": [ "NewPublicSubnet", "sgBuilder", "handleKeyPair"]
    },

   "BuilderFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "CreateR53Records",
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "." ] ] },
         "Comment" : {"Fn::Join" : [ "", ["DNS name for Provisioning VM on zone ",  { "Fn::If": ["CreateVendorDomain",{"Ref": "DNSZone" },{ "Ref" : "AppHostedZone"}]}]]},
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "BuilderHostname"}, ".",
               { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
            { "Fn::GetAtt" : [ "BuilderLinuxInstance", "PublicIp" ] }
         ]
      },
      "DependsOn": [ "BuilderLinuxInstance" ]	
   },	

   "PublicFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "CreateR53Records",
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "." ] ] },
         "Comment" : {"Fn::Join" : [ "", ["DNS name for NGFW Public IP on zone ",  { "Fn::If": ["CreateVendorDomain",{"Ref": "DNSZone" },{ "Ref" : "AppHostedZone"}]}]]},
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "PublicHostname"}, ".",
               { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "PublicElasticIP" }
         ]
      },
	  "DependsOn": [ "PublicElasticIP" ]
   },
   
   "FirewallFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "CreateR53Records",	  
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "." ] ] },
         "Comment" : {"Fn::Join" : [ "", ["DNS name for NGFW Management on zone ",  { "Fn::If": ["CreateVendorDomain",{"Ref": "DNSZone" },{ "Ref" : "AppHostedZone"}]}]]},
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "FirewallHostname"}, ".",
               { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "ManagementElasticIP" }
         ]
      },
	  "DependsOn": [ "ManagementElasticIP" ]
   },	   

   "KaliFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "KaliFQDNCondition",	  
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "." ] ] },
         "Comment" : {"Fn::Join" : [ "", ["DNS name for Kali Linux on zone ",  { "Fn::If": ["CreateVendorDomain",{"Ref": "DNSZone" },{ "Ref" : "AppHostedZone"}]}]]},
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "KaliHostname"}, ".",
               { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
            { "Fn::GetAtt" : [ "KaliLinuxInstance", "PublicIp" ] }
         ]
      },
	  "DependsOn": [ "KaliLinuxInstance" ]	        
   },

   "LambdaEC2Role": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version" : "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [ "lambda.amazonaws.com" ]
                    },
                    "Action": [ "sts:AssumeRole" ]
                }]
            },
            "ManagedPolicyArns": [
                { "Ref": "EC2KeyPairPolicy" },
                { "Ref": "LambdaExecutionPolicy"}
            ]
        }
    },

    "EC2HandleKeysFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Code": {
                "S3Bucket": { "Fn::FindInMap" : [ "LambdaBucketsRegionMap", { "Ref" : "AWS::Region" }, "Bucket" ] },
                "S3Key": "lambdas.zip"
            },
            "Description": "Handle EC2 KeyPair",
            "Handler": "index.handleKeyPair",
            "Role": {"Fn::GetAtt" : [ "LambdaEC2Role", "Arn" ] },
            "Runtime": "nodejs12.x",
            "Timeout": 30
        },
        "DependsOn": [
            "LambdaEC2Role"
        ]
    },

    "handleKeyPair": {
        "Type": "Custom::handleKeyPair",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["EC2HandleKeysFunction", "Arn"] },
            "keyName": {"Ref": "keyPairPrefix"},
            "stackName": { "Ref": "AWS::StackName" }
        },
        "DependsOn": [
            "EC2HandleKeysFunction"
        ]
    },

    "EC2KeyPairPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Properties": {
            "Description" : "EC2 KeyPair Creation Policy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "ec2:CreateKeyPair",
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": "ec2:DeleteKeyPair",
                        "Resource": "*"
                    }
                ]
            }
        }
    },
    "LambdaExecutionPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Properties": {
            "Description" : "Lambda Execution Policy",
            "PolicyDocument" : {
                "Version" : "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                    }
                ]
            }
        }
    }
  },

  "Outputs": {
    "FirewallManagementURL": {
      "Description": "VM-Series management interface URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Fn::Join" : [ "", [ {"Ref" : "FirewallHostname"}, ".", { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]} ] ] }
      ]]}
    },

	"KaliLinuxFQDN": {
      "Description": "Kali Linux FQDN",
	  "Condition" : "ConfDeployKali",
      "Value": { "Fn::Join" : [ "", [ {"Ref" : "KaliHostname"}, ".", { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]} ] ] }
    },	  

	"ProvisionFQDN": {
        "Description": "Provisioning VM FQDN",
        "Value": { "Fn::Join" : [ "", [ {"Ref" : "BuilderHostname"}, ".", { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]} ] ] }
    },


    "PublicIPAddressFQDN": {
      "Description": "Public IP FQDN",
      "Value": { "Fn::Join" : [ "", [ {"Ref" : "PublicHostname"}, ".", { "Fn::If": ["CreateVendorDomain",{"Fn::Sub" : ["${company}.dev.cortexlabs.rocks",{ "company": {"Ref": "Company"}}]},{ "Ref" : "AppHostedZone"}]} ] ] }
    },

    "CreatedKeyName": {
        "Description": "Created EC2 KeyPair Name",
        "Value": { "Fn::GetAtt": ["handleKeyPair", "keyName"]}
    },

    "DNSZoneId": {
        "Condition" : "CreateDNSHostedZone",
        "Description": "Created DNS Hosted Zone ID",
        "Value": {"Ref": "DNSZone" }
    }      
  }
}
