{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates 1 Active Directory Domain Controller in a private subnet. The default Domain Administrator password will be the one retrieved from the instance. Additional users (user1, user2, user3) are created with the same password. For adding member machines to the domain, ensure that they are launched into the domain member security group created by this template and then configure them to use the AD instances fixed private IP addresses as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template. QS(0001)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "VPC Network Configuration"
                    },
                    "Parameters": [
                        "VPCCIDR",
                        "VPCID",
                        "PrivateSubnet1CIDR",
                        "PrivateSubnet1ID",
                        "PublicSubnet1CIDR",
						"SecurityGroupWideOpen",
						"GatewayIP"
                    ]
                },
                {
                    "Label": {
                        "default": "DC Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "ADServer1InstanceType",
                        "ADServer1NetBIOSName",
                        "ADServer1PrivateIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Microsoft Active Directory Configuration"
                    },
                    "Parameters": [
                        "DomainDNSName",
                        "DomainNetBIOSName",
                        "RestoreModePassword",
                        "DomainAdminUser",
                        "DomainAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
						"FirewallCertURL"						
                    ]
                }
            ],
            "ParameterLabels": {
                "ADServer1InstanceType": {
                    "default": "Domain Controller Instance Type"
                },
                "ADServer1NetBIOSName": {
                    "default": "Domain Controller NetBIOS Name"
                },
                "ADServer1PrivateIP": {
                    "default": "Domain Controller Private IP Address"
                },
                "DomainAdminPassword": {
                    "default": "Domain Admin Password"
                },
                "DomainAdminUser": {
                    "default": "Domain Admin User Name"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "DomainNetBIOSName": {
                    "default": "Domain NetBIOS Name"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "PrivateSubnet1CIDR": {
                    "default": "Private Subnet CIDR"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet ID"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public Subnet CIDR"
                },
                "GatewayIP": {
                    "default": "Gateway IP Address"
                },				
				"SecurityGroupWideOpen": {
					"default": "Security Group That Allows All Traffic"
				},
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RestoreModePassword": {
                    "default": "Restore Mode Password"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
				"FirewallCertURL" : {
					"default": "Firewall Default Certificate URL"
				}
            }
        }
    },
    "Parameters": {
        "ADServer1InstanceType": {
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.large",
            "Description": "Amazon EC2 instance type for the first Active Directory instance",
            "Type": "String"
        },
        "ADServer1NetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "Default": "DC1",
            "Description": "NetBIOS name of the first Active Directory server (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "ADServer1PrivateIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "Default": "10.0.1.10",
            "Description": "Fixed private IP for the first Active Directory server located in Availability Zone 1",
            "Type": "String"
        },
        "GatewayIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "Default": "10.0.1.11",
            "Description": "Default Gateway IP Address",
            "Type": "String"
        },		
        "DomainAdminPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "DomainAdminUser": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Default": "paloalto",
            "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
            "MaxLength": "25",
            "MinLength": "5",
            "Type": "String"
        },
        "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
            "Default": "pandomain.local",
            "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "DomainNetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "Default": "PANDOMAIN",
            "Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.1.0/24",
            "Description": "CIDR block for private subnet 1 located in Availability Zone 1.",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/24",
            "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "SecurityGroupWideOpen": {
            "Description": "Security Group that allows all traffic",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },		
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "microsoft/activedirectory/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RestoreModePassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "True",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR Block for the VPC",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of the VPC (e.g., vpc-0343606e)",
            "Type": "AWS::EC2::VPC::Id"
        },
		"FirewallCertURL":{
			"Description": "Firewall Certificate URL",
			"Type": "String",
			"Default": "https://paloaltonetworks.box.com/shared/static/rkuuqhaxrmce2pl6kajsea95czpndrvm"
		}
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },

    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {"WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2018.10.14"},
            "ap-south-1": { "W2012R2": "ami-0bd1dc65d74266ee2" },
            "eu-west-3": { "W2012R2": "ami-040ef025ec13d58bf" },
            "eu-north-1": { "W2012R2": "ami-08e8ecaacd7cfa6d5" },
            "eu-west-2": { "W2012R2": "ami-0a7551990da17b8d6" },
            "eu-west-1": { "W2012R2": "ami-01dbaf1c50a36891d" },
            "ap-northeast-2": { "W2012R2": "ami-0b3a3970b73d5b63a" },
            "ap-northeast-1": { "W2012R2": "ami-0a45b66bda01c89c8" },
            "sa-east-1": { "W2012R2": "ami-01d74c2e93478e2f5" },
            "ca-central-1": { "W2012R2": "ami-0a27bbef221046aae" },
            "ap-southeast-1": { "W2012R2": "ami-0bf96f139bff648cc" },
            "ap-southeast-2": { "W2012R2": "ami-0664c039c4dea5193" },
            "eu-central-1": { "W2012R2": "ami-0d55859ee09a59138" },
            "us-east-1": { "W2012R2": "ami-0fba87d7f8c8744d4" },
            "us-east-2": { "W2012R2": "ami-0679e5ac84d15f15e" },
            "us-west-1": { "W2012R2": "ami-04370c2a300903acc" },
            "us-west-2": { "W2012R2": "ami-02e27664434db6def" }
        }
    },
    "Resources": {
        "ADServerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:${Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*",
                                            {
                                                "Partition": "aws"
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    }
                ],
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Effect": "Allow"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },
        "ADServerProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "ADServerRole"
                    }
                ],
                "Path": "/"
            }
        },
        "DomainController1": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "ADServerRole"
                        },
                        "buckets": [
                            {
                                "Ref": "QSS3BucketName"
                            }
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "installADDS",
                            "configureSites",
                            "installADCS",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DomainController1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r DomainController1",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/ConvertTo-EnterpriseAdmin.ps1",
                                        {
                                            "QSS3Region": "s3"
                                        }
                                    ]
                                },
                                "authentication": "S3AccessCreds"
                            },
                            "c:\\cfn\\scripts\\New-CertificateAuthority.ps1": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/New-CertificateAuthority.ps1",
                                        {
                                            "QSS3Region": "s3"
                                        }
                                    ]
                                },
                                "authentication": "S3AccessCreds"
                            },
                            "c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/xAdcsDeployment_0.1.0.0.zip",
                                        {
                                            "QSS3Region": "s3"
                                        }
                                    ]
                                },
                                "authentication": "S3AccessCreds"
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1",
                                        {
                                            "QSS3Region": "s3"
                                        }
                                    ]
                                },
                                "authentication": "S3AccessCreds"
                            },
                            "c:\\cfn\\firewallcert.crt": {
                                "source": { "Ref" : "FirewallCertURL" }
                            }						
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "c-unpack-dsc-resource": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules'",
                                "waitAfterCompletion": "0"
                            },
							"d-download-password": {
                                "command": {
                                    "Fn::Join": [
										"",
										[
											"echo ",
											{ "Fn::Base64" : {"Ref" : "DomainAdminPassword" } },
											" > c:\\cfn\\scripts\\pw_b64.txt"
										]
                                    ]
                                },								
								"waitAfterCompletion": "0"
							},
							"e-decode-password": {
								"command": "c:\\windows\\system32\\certutil.exe -decode c:\\cfn\\scripts\\pw_b64.txt c:\\cfn\\scripts\\pw.txt",
								"waitAfterCompletion": "0"
							},
							"f-del-b64-pw": {
								"command": "del c:\\cfn\\scripts\\pw_b64.txt",
								"waitAfterCompletion": "0"
							}
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "45"
                            },
                            "b-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe Rename-Computer -NewName ",
                                            {
                                                "Ref": "ADServer1NetBIOSName"
                                            },
                                            " -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "installADDS": {
                        "commands": {
                            "1-install-prereqs": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "2-install-adds": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"$pw=get-content c:\\cfn\\scripts\\pw.txt; Install-ADDSForest -DomainName ",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-SafeModeAdministratorPassword (ConvertTo-SecureString $pw -AsPlainText -Force) ",
                                            "-DomainMode Win2012R2 ",
                                            "-DomainNetbiosName ",
                                            {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            " ",
                                            "-ForestMode Win2012R2 ",
                                            "-Confirm:$false ",
                                            "-Force\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            },
                            "3-restart-service": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command Restart-Service NetLogon -EA 0"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "180"
                            },
							"31-rm-pwd-complexity-1": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command secedit /export /cfg c:\\secpol.cfg"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },							
							"32-rm-pwd-complexity-2": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command \"(gc C:\\secpol.cfg).replace('PasswordComplexity = 1', 'PasswordComplexity = 0') | Out-File C:\\secpol.cfg\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },	
							"33-rm-pwd-complexity-3": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command secedit /configure /db c:\\windows\\security\\local.sdb /cfg c:\\secpol.cfg /areas SECURITYPOLICY"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },	
                            "4-create-adminuser": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"$pw=get-content c:\\cfn\\scripts\\pw.txt; New-ADUser ",
                                            "-Name ",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            " ",
                                            "-UserPrincipalName ",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "@",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString $pw -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "41-create-user1": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"$pw=get-content c:\\cfn\\scripts\\pw.txt; New-ADUser ",
                                            "-Name User1 -UserPrincipalName user1@",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString $pw -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },							
                            "42-create-user2": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"$pw=get-content c:\\cfn\\scripts\\pw.txt; New-ADUser ",
                                            "-Name User2 -UserPrincipalName user2@",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString $pw -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },	
                            "43-create-user3": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"$pw=get-content c:\\cfn\\scripts\\pw.txt; New-ADUser ",
                                            "-Name User3 -UserPrincipalName user3@",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString $pw -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },								
                            "5-update-adminuser": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",
                                            {
                                                "Ref": "DomainAdminUser"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "51-update-adminuser1": {
                                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members user1",
                                "waitAfterCompletion": "0"
                            },
                            "52-update-adminuser2": {
                                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members user2",
                                "waitAfterCompletion": "0"
                            },
                            "53-update-adminuser3": {
                                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members user3",
                                "waitAfterCompletion": "0"
                            }							
                        }
                    },
                    "configureSites": {
                        "commands": {
                            "a-rename-default-site": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "\"",
                                            "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "c-create-publicsubnet-1": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref": "PublicSubnet1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "e-create-privatesubnet-1": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref": "PrivateSubnet1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "installADCS": {
                        "commands": {
                            "a-install-ca": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command \"$pw=get-content c:\\cfn\\scripts\\pw.txt; c:\\cfn\\scripts\\New-CertificateAuthority.ps1 -Username ",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            " -Password $pw -DomainDNSName ",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
											"\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
							"b-import-fwcert": {
								"command": "powershell.exe -Command certutil -addstore \"Root\" c:\\cfn\\firewallcert.crt",
								"waitAfterCompletion": "0"
							}
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref": "DomainController1WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ADServerProfile"
                },
                "InstanceType": {
                    "Ref": "ADServer1InstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1ID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ADServer1NetBIOSName"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "SecurityGroupWideOpen"
                    }
                ],
                "PrivateIpAddress": {
                    "Ref": "ADServer1PrivateIP"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
								"route add 0.0.0.0 mask 128.0.0.0 ",
								{
									"Ref" : "GatewayIP"
								},
								" -p\n",						
								"route add 128.0.0.0 mask 128.0.0.0 ",
								{
									"Ref" : "GatewayIP"
								},
								" -p\n",
								"powershell.exe -Command \"do { Write-Host waiting_10s_for_network; sleep 10 } until(Test-NetConnection www.google.com -Port 443 | ? { $_.TcpTestSucceeded } )\"\n",
								"powershell.exe -Command \"[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};(New-Object Net.WebClient).DownloadFile('",
                                {
                                    "Ref": "FirewallCertURL"
                                },
								"','firewallcert.crt')\"\n",
								"powershell.exe -Command certutil -addstore \"Root\" firewallcert.crt\n",
								"type \"c:\\Program Files\\Amazon\\cfn-bootstrap\\cacert.pem\" firewallcert.crt > \"c:\\Program Files\\Amazon\\cfn-bootstrap\\cacert.pem\"\n",
 								"cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r DomainController1",
                                " --region ",	
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DomainController1WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "DomainController1",
            "Properties": {
                "Handle": {
                    "Ref": "DomainController1WaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "DomainController1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "DomainController1SG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Domain Controller",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5985",
                        "ToPort": "5985",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "123",
                        "ToPort": "123",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "135",
                        "ToPort": "135",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9389",
                        "ToPort": "9389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "138",
                        "ToPort": "138",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "636",
                        "ToPort": "636",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3268",
                        "ToPort": "3268",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3269",
                        "ToPort": "3269",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "PublicSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "PublicSubnet1CIDR"
                        }
                    }
                ]
            }
        },
        "DomainMemberSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Domain Members",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5985",
                        "ToPort": "5985",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "PublicSubnet1CIDR"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "DomainAdmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "DomainNetBIOSName"
                        },
                        "\\",
                        {
                            "Ref": "DomainAdminUser"
                        }
                    ]
                ]
            },
            "Description": "Domain administrator account"
        },
        "DomainMemberSGID": {
            "Value": {
                "Ref": "DomainMemberSG"
            },
            "Description": "Domain Member Security Group ID"
        }
    }
}